/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The source file or folder that triggered an event in the event stream.
 */
@Schema(description = "The source file or folder that triggered an event in the event stream.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class EventSource {
  /**
   * The type of the item that the event represents. Can be &#x60;file&#x60; or &#x60;folder&#x60;. 
   */
  public enum ItemTypeEnum {
    FILE("file"),
    FOLDER("folder");

    private String value;

    ItemTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ItemTypeEnum fromValue(String text) {
      for (ItemTypeEnum b : ItemTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("item_type")
  private ItemTypeEnum itemType = null;

  @JsonProperty("item_id")
  private String itemId = null;

  @JsonProperty("item_name")
  private String itemName = null;

  @JsonProperty("parent")
  private AllOfEventSourceParent parent = null;

  @JsonProperty("owned_by")
  private AllOfEventSourceOwnedBy ownedBy = null;

  public EventSource itemType(ItemTypeEnum itemType) {
    this.itemType = itemType;
    return this;
  }

   /**
   * The type of the item that the event represents. Can be &#x60;file&#x60; or &#x60;folder&#x60;. 
   * @return itemType
  **/
  @Schema(example = "file", description = "The type of the item that the event represents. Can be `file` or `folder`. ")
  public ItemTypeEnum getItemType() {
    return itemType;
  }

  public void setItemType(ItemTypeEnum itemType) {
    this.itemType = itemType;
  }

  public EventSource itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

   /**
   * The unique identifier that represents the item. 
   * @return itemId
  **/
  @Schema(example = "560284318361", description = "The unique identifier that represents the item. ")
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }

  public EventSource itemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

   /**
   * The name of the item. 
   * @return itemName
  **/
  @Schema(example = "report.pdf", description = "The name of the item. ")
  public String getItemName() {
    return itemName;
  }

  public void setItemName(String itemName) {
    this.itemName = itemName;
  }

  public EventSource parent(AllOfEventSourceParent parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(description = "")
  public AllOfEventSourceParent getParent() {
    return parent;
  }

  public void setParent(AllOfEventSourceParent parent) {
    this.parent = parent;
  }

  public EventSource ownedBy(AllOfEventSourceOwnedBy ownedBy) {
    this.ownedBy = ownedBy;
    return this;
  }

   /**
   * Get ownedBy
   * @return ownedBy
  **/
  @Schema(description = "")
  public AllOfEventSourceOwnedBy getOwnedBy() {
    return ownedBy;
  }

  public void setOwnedBy(AllOfEventSourceOwnedBy ownedBy) {
    this.ownedBy = ownedBy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSource eventSource = (EventSource) o;
    return Objects.equals(this.itemType, eventSource.itemType) &&
        Objects.equals(this.itemId, eventSource.itemId) &&
        Objects.equals(this.itemName, eventSource.itemName) &&
        Objects.equals(this.parent, eventSource.parent) &&
        Objects.equals(this.ownedBy, eventSource.ownedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemType, itemId, itemName, parent, ownedBy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSource {\n");
    
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    ownedBy: ").append(toIndentedString(ownedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
