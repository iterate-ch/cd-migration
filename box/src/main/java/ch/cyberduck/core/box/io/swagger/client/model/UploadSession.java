/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * An upload session for chunk uploading a file.
 */
@Schema(description = "An upload session for chunk uploading a file.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class UploadSession {
  @JsonProperty("id")
  private String id = null;

  /**
   * &#x60;upload_session&#x60;
   */
  public enum TypeEnum {
    SESSION("upload_session");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("session_expires_at")
  private DateTime sessionExpiresAt = null;

  @JsonProperty("part_size")
  private Long partSize = null;

  @JsonProperty("total_parts")
  private Integer totalParts = null;

  @JsonProperty("num_parts_processed")
  private Integer numPartsProcessed = null;

  @JsonProperty("session_endpoints")
  private AllOfUploadSessionSessionEndpoints sessionEndpoints = null;

  public UploadSession id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this session
   * @return id
  **/
  @Schema(example = "F971964745A5CD0C001BBE4E58196BFD", description = "The unique identifier for this session")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public UploadSession type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * &#x60;upload_session&#x60;
   * @return type
  **/
  @Schema(example = "upload_session", description = "`upload_session`")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public UploadSession sessionExpiresAt(DateTime sessionExpiresAt) {
    this.sessionExpiresAt = sessionExpiresAt;
    return this;
  }

   /**
   * The date and time when this session expires.
   * @return sessionExpiresAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time when this session expires.")
  public DateTime getSessionExpiresAt() {
    return sessionExpiresAt;
  }

  public void setSessionExpiresAt(DateTime sessionExpiresAt) {
    this.sessionExpiresAt = sessionExpiresAt;
  }

  public UploadSession partSize(Long partSize) {
    this.partSize = partSize;
    return this;
  }

   /**
   * The  size in bytes that must be used for all parts of of the upload.  Only the last part is allowed to be of a smaller size.
   * @return partSize
  **/
  @Schema(example = "1024", description = "The  size in bytes that must be used for all parts of of the upload.  Only the last part is allowed to be of a smaller size.")
  public Long getPartSize() {
    return partSize;
  }

  public void setPartSize(Long partSize) {
    this.partSize = partSize;
  }

  public UploadSession totalParts(Integer totalParts) {
    this.totalParts = totalParts;
    return this;
  }

   /**
   * The total number of parts expected in this upload session, as determined by the file size and part size.
   * @return totalParts
  **/
  @Schema(example = "1000", description = "The total number of parts expected in this upload session, as determined by the file size and part size.")
  public Integer getTotalParts() {
    return totalParts;
  }

  public void setTotalParts(Integer totalParts) {
    this.totalParts = totalParts;
  }

  public UploadSession numPartsProcessed(Integer numPartsProcessed) {
    this.numPartsProcessed = numPartsProcessed;
    return this;
  }

   /**
   * The number of parts that have been uploaded and processed by the server. This starts at &#x60;0&#x60;.  When committing a file files, inspecting this property can provide insight if all parts have been uploaded correctly.
   * @return numPartsProcessed
  **/
  @Schema(example = "455", description = "The number of parts that have been uploaded and processed by the server. This starts at `0`.  When committing a file files, inspecting this property can provide insight if all parts have been uploaded correctly.")
  public Integer getNumPartsProcessed() {
    return numPartsProcessed;
  }

  public void setNumPartsProcessed(Integer numPartsProcessed) {
    this.numPartsProcessed = numPartsProcessed;
  }

  public UploadSession sessionEndpoints(AllOfUploadSessionSessionEndpoints sessionEndpoints) {
    this.sessionEndpoints = sessionEndpoints;
    return this;
  }

   /**
   * Get sessionEndpoints
   * @return sessionEndpoints
  **/
  @Schema(description = "")
  public AllOfUploadSessionSessionEndpoints getSessionEndpoints() {
    return sessionEndpoints;
  }

  public void setSessionEndpoints(AllOfUploadSessionSessionEndpoints sessionEndpoints) {
    this.sessionEndpoints = sessionEndpoints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadSession uploadSession = (UploadSession) o;
    return Objects.equals(this.id, uploadSession.id) &&
        Objects.equals(this.type, uploadSession.type) &&
        Objects.equals(this.sessionExpiresAt, uploadSession.sessionExpiresAt) &&
        Objects.equals(this.partSize, uploadSession.partSize) &&
        Objects.equals(this.totalParts, uploadSession.totalParts) &&
        Objects.equals(this.numPartsProcessed, uploadSession.numPartsProcessed) &&
        Objects.equals(this.sessionEndpoints, uploadSession.sessionEndpoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, sessionExpiresAt, partSize, totalParts, numPartsProcessed, sessionEndpoints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadSession {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sessionExpiresAt: ").append(toIndentedString(sessionExpiresAt)).append("\n");
    sb.append("    partSize: ").append(toIndentedString(partSize)).append("\n");
    sb.append("    totalParts: ").append(toIndentedString(totalParts)).append("\n");
    sb.append("    numPartsProcessed: ").append(toIndentedString(numPartsProcessed)).append("\n");
    sb.append("    sessionEndpoints: ").append(toIndentedString(sessionEndpoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
