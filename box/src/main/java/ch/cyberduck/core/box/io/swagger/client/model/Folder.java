/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.FolderFolderUploadEmail;
import ch.cyberduck.core.box.io.swagger.client.model.FolderMini;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * A standard representation of a folder, as returned from any folder API endpoints by default
 */
@Schema(description = "A standard representation of a folder, as returned from any folder API endpoints by default")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class Folder extends FolderMini implements OneOfMetadataQueryResultsEntriesItems {
  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("modified_at")
  private DateTime modifiedAt = null;

  @JsonProperty("description")
  private Object description = null;

  @JsonProperty("size")
  private Long size = null;

  @JsonProperty("path_collection")
  private Object pathCollection = null;

  @JsonProperty("created_by")
  private Object createdBy = null;

  @JsonProperty("modified_by")
  private Object modifiedBy = null;

  @JsonProperty("trashed_at")
  private DateTime trashedAt = null;

  @JsonProperty("purged_at")
  private DateTime purgedAt = null;

  @JsonProperty("content_created_at")
  private DateTime contentCreatedAt = null;

  @JsonProperty("content_modified_at")
  private DateTime contentModifiedAt = null;

  @JsonProperty("expires_at")
  private DateTime expiresAt = null;

  @JsonProperty("owned_by")
  private Object ownedBy = null;

  @JsonProperty("shared_link")
  private Object sharedLink = null;

  @JsonProperty("folder_upload_email")
  private FolderFolderUploadEmail folderUploadEmail = null;

  @JsonProperty("parent")
  private Object parent = null;

  /**
   * Defines if this item has been deleted or not.  * &#x60;active&#x60; when the item has is not in the trash * &#x60;trashed&#x60; when the item has been moved to the trash but not deleted * &#x60;deleted&#x60; when the item has been permanently deleted.
   */
  public enum ItemStatusEnum {
    ACTIVE("active"),
    TRASHED("trashed"),
    DELETED("deleted");

    private String value;

    ItemStatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ItemStatusEnum fromValue(String text) {
      for (ItemStatusEnum b : ItemStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("item_status")
  private ItemStatusEnum itemStatus = null;

  @JsonProperty("item_collection")
  private Object itemCollection = null;

  public Folder createdAt(DateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the folder was created. This value may be &#x60;null&#x60; for some folders such as the root folder or the trash folder.
   * @return createdAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time when the folder was created. This value may be `null` for some folders such as the root folder or the trash folder.")
  public DateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(DateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Folder modifiedAt(DateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * The date and time when the folder was last updated. This value may be &#x60;null&#x60; for some folders such as the root folder or the trash folder.
   * @return modifiedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time when the folder was last updated. This value may be `null` for some folders such as the root folder or the trash folder.")
  public DateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(DateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public Folder description(Object description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public Object getDescription() {
    return description;
  }

  public void setDescription(Object description) {
    this.description = description;
  }

  public Folder size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * The folder size in bytes.  Be careful parsing this integer as its value can get very large.
   * @return size
  **/
  @Schema(example = "629644", description = "The folder size in bytes.  Be careful parsing this integer as its value can get very large.")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public Folder pathCollection(Object pathCollection) {
    this.pathCollection = pathCollection;
    return this;
  }

   /**
   * Get pathCollection
   * @return pathCollection
  **/
  @Schema(description = "")
  public Object getPathCollection() {
    return pathCollection;
  }

  public void setPathCollection(Object pathCollection) {
    this.pathCollection = pathCollection;
  }

  public Folder createdBy(Object createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(description = "")
  public Object getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Object createdBy) {
    this.createdBy = createdBy;
  }

  public Folder modifiedBy(Object modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @Schema(description = "")
  public Object getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(Object modifiedBy) {
    this.modifiedBy = modifiedBy;
  }

  public Folder trashedAt(DateTime trashedAt) {
    this.trashedAt = trashedAt;
    return this;
  }

   /**
   * The time at which this folder was put in the trash.
   * @return trashedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The time at which this folder was put in the trash.")
  public DateTime getTrashedAt() {
    return trashedAt;
  }

  public void setTrashedAt(DateTime trashedAt) {
    this.trashedAt = trashedAt;
  }

  public Folder purgedAt(DateTime purgedAt) {
    this.purgedAt = purgedAt;
    return this;
  }

   /**
   * The time at which this folder is expected to be purged from the trash.
   * @return purgedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The time at which this folder is expected to be purged from the trash.")
  public DateTime getPurgedAt() {
    return purgedAt;
  }

  public void setPurgedAt(DateTime purgedAt) {
    this.purgedAt = purgedAt;
  }

  public Folder contentCreatedAt(DateTime contentCreatedAt) {
    this.contentCreatedAt = contentCreatedAt;
    return this;
  }

   /**
   * The date and time at which this folder was originally created.
   * @return contentCreatedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time at which this folder was originally created.")
  public DateTime getContentCreatedAt() {
    return contentCreatedAt;
  }

  public void setContentCreatedAt(DateTime contentCreatedAt) {
    this.contentCreatedAt = contentCreatedAt;
  }

  public Folder contentModifiedAt(DateTime contentModifiedAt) {
    this.contentModifiedAt = contentModifiedAt;
    return this;
  }

   /**
   * The date and time at which this folder was last updated.
   * @return contentModifiedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date and time at which this folder was last updated.")
  public DateTime getContentModifiedAt() {
    return contentModifiedAt;
  }

  public void setContentModifiedAt(DateTime contentModifiedAt) {
    this.contentModifiedAt = contentModifiedAt;
  }

  public Folder expiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The time and which the folder will be automatically be deleted.
   * @return expiresAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The time and which the folder will be automatically be deleted.")
  public DateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
  }

  public Folder ownedBy(Object ownedBy) {
    this.ownedBy = ownedBy;
    return this;
  }

   /**
   * Get ownedBy
   * @return ownedBy
  **/
  @Schema(description = "")
  public Object getOwnedBy() {
    return ownedBy;
  }

  public void setOwnedBy(Object ownedBy) {
    this.ownedBy = ownedBy;
  }

  public Folder sharedLink(Object sharedLink) {
    this.sharedLink = sharedLink;
    return this;
  }

   /**
   * Get sharedLink
   * @return sharedLink
  **/
  @Schema(description = "")
  public Object getSharedLink() {
    return sharedLink;
  }

  public void setSharedLink(Object sharedLink) {
    this.sharedLink = sharedLink;
  }

  public Folder folderUploadEmail(FolderFolderUploadEmail folderUploadEmail) {
    this.folderUploadEmail = folderUploadEmail;
    return this;
  }

   /**
   * Get folderUploadEmail
   * @return folderUploadEmail
  **/
  @Schema(description = "")
  public FolderFolderUploadEmail getFolderUploadEmail() {
    return folderUploadEmail;
  }

  public void setFolderUploadEmail(FolderFolderUploadEmail folderUploadEmail) {
    this.folderUploadEmail = folderUploadEmail;
  }

  public Folder parent(Object parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(description = "")
  public Object getParent() {
    return parent;
  }

  public void setParent(Object parent) {
    this.parent = parent;
  }

  public Folder itemStatus(ItemStatusEnum itemStatus) {
    this.itemStatus = itemStatus;
    return this;
  }

   /**
   * Defines if this item has been deleted or not.  * &#x60;active&#x60; when the item has is not in the trash * &#x60;trashed&#x60; when the item has been moved to the trash but not deleted * &#x60;deleted&#x60; when the item has been permanently deleted.
   * @return itemStatus
  **/
  @Schema(example = "active", description = "Defines if this item has been deleted or not.  * `active` when the item has is not in the trash * `trashed` when the item has been moved to the trash but not deleted * `deleted` when the item has been permanently deleted.")
  public ItemStatusEnum getItemStatus() {
    return itemStatus;
  }

  public void setItemStatus(ItemStatusEnum itemStatus) {
    this.itemStatus = itemStatus;
  }

  public Folder itemCollection(Object itemCollection) {
    this.itemCollection = itemCollection;
    return this;
  }

   /**
   * Get itemCollection
   * @return itemCollection
  **/
  @Schema(description = "")
  public Object getItemCollection() {
    return itemCollection;
  }

  public void setItemCollection(Object itemCollection) {
    this.itemCollection = itemCollection;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Folder folder = (Folder) o;
    return Objects.equals(this.createdAt, folder.createdAt) &&
        Objects.equals(this.modifiedAt, folder.modifiedAt) &&
        Objects.equals(this.description, folder.description) &&
        Objects.equals(this.size, folder.size) &&
        Objects.equals(this.pathCollection, folder.pathCollection) &&
        Objects.equals(this.createdBy, folder.createdBy) &&
        Objects.equals(this.modifiedBy, folder.modifiedBy) &&
        Objects.equals(this.trashedAt, folder.trashedAt) &&
        Objects.equals(this.purgedAt, folder.purgedAt) &&
        Objects.equals(this.contentCreatedAt, folder.contentCreatedAt) &&
        Objects.equals(this.contentModifiedAt, folder.contentModifiedAt) &&
        Objects.equals(this.expiresAt, folder.expiresAt) &&
        Objects.equals(this.ownedBy, folder.ownedBy) &&
        Objects.equals(this.sharedLink, folder.sharedLink) &&
        Objects.equals(this.folderUploadEmail, folder.folderUploadEmail) &&
        Objects.equals(this.parent, folder.parent) &&
        Objects.equals(this.itemStatus, folder.itemStatus) &&
        Objects.equals(this.itemCollection, folder.itemCollection) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, modifiedAt, description, size, pathCollection, createdBy, modifiedBy, trashedAt, purgedAt, contentCreatedAt, contentModifiedAt, expiresAt, ownedBy, sharedLink, folderUploadEmail, parent, itemStatus, itemCollection, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Folder {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    pathCollection: ").append(toIndentedString(pathCollection)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    trashedAt: ").append(toIndentedString(trashedAt)).append("\n");
    sb.append("    purgedAt: ").append(toIndentedString(purgedAt)).append("\n");
    sb.append("    contentCreatedAt: ").append(toIndentedString(contentCreatedAt)).append("\n");
    sb.append("    contentModifiedAt: ").append(toIndentedString(contentModifiedAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    ownedBy: ").append(toIndentedString(ownedBy)).append("\n");
    sb.append("    sharedLink: ").append(toIndentedString(sharedLink)).append("\n");
    sb.append("    folderUploadEmail: ").append(toIndentedString(folderUploadEmail)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    itemStatus: ").append(toIndentedString(itemStatus)).append("\n");
    sb.append("    itemCollection: ").append(toIndentedString(itemCollection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
