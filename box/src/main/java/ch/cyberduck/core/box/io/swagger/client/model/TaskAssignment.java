/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * A task assignment defines which task is assigned to which user to complete.
 */
@Schema(description = "A task assignment defines which task is assigned to which user to complete.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class TaskAssignment {
  @JsonProperty("id")
  private String id = null;

  /**
   * &#x60;task_assignment&#x60;
   */
  public enum TypeEnum {
    ASSIGNMENT("task_assignment");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("item")
  private AllOfTaskAssignmentItem item = null;

  @JsonProperty("assigned_to")
  private AllOfTaskAssignmentAssignedTo assignedTo = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("completed_at")
  private DateTime completedAt = null;

  @JsonProperty("assigned_at")
  private DateTime assignedAt = null;

  @JsonProperty("reminded_at")
  private DateTime remindedAt = null;

  /**
   * The current state of the assignment. The available states depend on the &#x60;action&#x60; value of the task object.
   */
  public enum ResolutionStateEnum {
    COMPLETED("completed"),
    INCOMPLETE("incomplete"),
    APPROVED("approved"),
    REJECTED("rejected");

    private String value;

    ResolutionStateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ResolutionStateEnum fromValue(String text) {
      for (ResolutionStateEnum b : ResolutionStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("resolution_state")
  private ResolutionStateEnum resolutionState = null;

  @JsonProperty("assigned_by")
  private AllOfTaskAssignmentAssignedBy assignedBy = null;

  public TaskAssignment id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this task assignment
   * @return id
  **/
  @Schema(example = "11446498", description = "The unique identifier for this task assignment")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TaskAssignment type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * &#x60;task_assignment&#x60;
   * @return type
  **/
  @Schema(example = "task_assignment", description = "`task_assignment`")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TaskAssignment item(AllOfTaskAssignmentItem item) {
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @Schema(description = "")
  public AllOfTaskAssignmentItem getItem() {
    return item;
  }

  public void setItem(AllOfTaskAssignmentItem item) {
    this.item = item;
  }

  public TaskAssignment assignedTo(AllOfTaskAssignmentAssignedTo assignedTo) {
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * Get assignedTo
   * @return assignedTo
  **/
  @Schema(description = "")
  public AllOfTaskAssignmentAssignedTo getAssignedTo() {
    return assignedTo;
  }

  public void setAssignedTo(AllOfTaskAssignmentAssignedTo assignedTo) {
    this.assignedTo = assignedTo;
  }

  public TaskAssignment message(String message) {
    this.message = message;
    return this;
  }

   /**
   * A message that will is included with the task assignment. This is visible to the assigned user in the web and mobile UI.
   * @return message
  **/
  @Schema(example = "Please review", description = "A message that will is included with the task assignment. This is visible to the assigned user in the web and mobile UI.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public TaskAssignment completedAt(DateTime completedAt) {
    this.completedAt = completedAt;
    return this;
  }

   /**
   * The date at which this task assignment was completed. This will be &#x60;null&#x60; if the task is not completed yet.
   * @return completedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date at which this task assignment was completed. This will be `null` if the task is not completed yet.")
  public DateTime getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(DateTime completedAt) {
    this.completedAt = completedAt;
  }

  public TaskAssignment assignedAt(DateTime assignedAt) {
    this.assignedAt = assignedAt;
    return this;
  }

   /**
   * The date at which this task was assigned to the user.
   * @return assignedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date at which this task was assigned to the user.")
  public DateTime getAssignedAt() {
    return assignedAt;
  }

  public void setAssignedAt(DateTime assignedAt) {
    this.assignedAt = assignedAt;
  }

  public TaskAssignment remindedAt(DateTime remindedAt) {
    this.remindedAt = remindedAt;
    return this;
  }

   /**
   * The date at which the assigned user was reminded of this task assignment.
   * @return remindedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The date at which the assigned user was reminded of this task assignment.")
  public DateTime getRemindedAt() {
    return remindedAt;
  }

  public void setRemindedAt(DateTime remindedAt) {
    this.remindedAt = remindedAt;
  }

  public TaskAssignment resolutionState(ResolutionStateEnum resolutionState) {
    this.resolutionState = resolutionState;
    return this;
  }

   /**
   * The current state of the assignment. The available states depend on the &#x60;action&#x60; value of the task object.
   * @return resolutionState
  **/
  @Schema(example = "incomplete", description = "The current state of the assignment. The available states depend on the `action` value of the task object.")
  public ResolutionStateEnum getResolutionState() {
    return resolutionState;
  }

  public void setResolutionState(ResolutionStateEnum resolutionState) {
    this.resolutionState = resolutionState;
  }

  public TaskAssignment assignedBy(AllOfTaskAssignmentAssignedBy assignedBy) {
    this.assignedBy = assignedBy;
    return this;
  }

   /**
   * Get assignedBy
   * @return assignedBy
  **/
  @Schema(description = "")
  public AllOfTaskAssignmentAssignedBy getAssignedBy() {
    return assignedBy;
  }

  public void setAssignedBy(AllOfTaskAssignmentAssignedBy assignedBy) {
    this.assignedBy = assignedBy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskAssignment taskAssignment = (TaskAssignment) o;
    return Objects.equals(this.id, taskAssignment.id) &&
        Objects.equals(this.type, taskAssignment.type) &&
        Objects.equals(this.item, taskAssignment.item) &&
        Objects.equals(this.assignedTo, taskAssignment.assignedTo) &&
        Objects.equals(this.message, taskAssignment.message) &&
        Objects.equals(this.completedAt, taskAssignment.completedAt) &&
        Objects.equals(this.assignedAt, taskAssignment.assignedAt) &&
        Objects.equals(this.remindedAt, taskAssignment.remindedAt) &&
        Objects.equals(this.resolutionState, taskAssignment.resolutionState) &&
        Objects.equals(this.assignedBy, taskAssignment.assignedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, item, assignedTo, message, completedAt, assignedAt, remindedAt, resolutionState, assignedBy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskAssignment {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    assignedAt: ").append(toIndentedString(assignedAt)).append("\n");
    sb.append("    remindedAt: ").append(toIndentedString(remindedAt)).append("\n");
    sb.append("    resolutionState: ").append(toIndentedString(resolutionState)).append("\n");
    sb.append("    assignedBy: ").append(toIndentedString(assignedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
