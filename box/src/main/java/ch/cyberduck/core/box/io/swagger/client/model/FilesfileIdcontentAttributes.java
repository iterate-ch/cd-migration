/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * The additional attributes of the file being uploaded. Mainly the name and the parent folder. These attributes are part of the multi part request body and are in JSON format.  &lt;Message warning&gt;    The &#x60;attributes&#x60; part of the body must come **before** the   &#x60;file&#x60; part. Requests that do not follow this format when   uploading the file will receive a HTTP &#x60;400&#x60; error with a   &#x60;metadata_after_file_contents&#x60; error code.  &lt;/Message&gt;
 */
@Schema(description = "The additional attributes of the file being uploaded. Mainly the name and the parent folder. These attributes are part of the multi part request body and are in JSON format.  <Message warning>    The `attributes` part of the body must come **before** the   `file` part. Requests that do not follow this format when   uploading the file will receive a HTTP `400` error with a   `metadata_after_file_contents` error code.  </Message>")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class FilesfileIdcontentAttributes {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("content_modified_at")
  private DateTime contentModifiedAt = null;

  public FilesfileIdcontentAttributes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * An optional new name for the file. If specified, the file will be renamed when the new version is uploaded.
   * @return name
  **/
  @Schema(example = "Photo 2.0.png", required = true, description = "An optional new name for the file. If specified, the file will be renamed when the new version is uploaded.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FilesfileIdcontentAttributes contentModifiedAt(DateTime contentModifiedAt) {
    this.contentModifiedAt = contentModifiedAt;
    return this;
  }

   /**
   * Defines the time the file was last modified at.  If not set, the upload time will be used.
   * @return contentModifiedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "Defines the time the file was last modified at.  If not set, the upload time will be used.")
  public DateTime getContentModifiedAt() {
    return contentModifiedAt;
  }

  public void setContentModifiedAt(DateTime contentModifiedAt) {
    this.contentModifiedAt = contentModifiedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilesfileIdcontentAttributes filesfileIdcontentAttributes = (FilesfileIdcontentAttributes) o;
    return Objects.equals(this.name, filesfileIdcontentAttributes.name) &&
        Objects.equals(this.contentModifiedAt, filesfileIdcontentAttributes.contentModifiedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, contentModifiedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilesfileIdcontentAttributes {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    contentModifiedAt: ").append(toIndentedString(contentModifiedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
