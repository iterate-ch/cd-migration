/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.MetadataCascadePolicyOwnerEnterprise;
import ch.cyberduck.core.box.io.swagger.client.model.MetadataCascadePolicyParent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * A metadata cascade policy automatically applies a metadata template instance to all the files and folders within the targeted folder.
 */
@Schema(description = "A metadata cascade policy automatically applies a metadata template instance to all the files and folders within the targeted folder.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class MetadataCascadePolicy {
  @JsonProperty("id")
  private String id = null;

  /**
   * &#x60;metadata_cascade_policy&#x60;
   */
  public enum TypeEnum {
    POLICY("metadata_cascade_policy");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("owner_enterprise")
  private MetadataCascadePolicyOwnerEnterprise ownerEnterprise = null;

  @JsonProperty("parent")
  private MetadataCascadePolicyParent parent = null;

  /**
   * The scope of the of the template that is cascaded down to the folder&#x27;s children.
   */
  public enum ScopeEnum {
    GLOBAL("global"),
    ENTERPRISE__("enterprise_*");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ScopeEnum fromValue(String text) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("scope")
  private ScopeEnum scope = null;

  @JsonProperty("templateKey")
  private String templateKey = null;

  public MetadataCascadePolicy id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the metadata cascade policy object
   * @return id
  **/
  @Schema(example = "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7", description = "The ID of the metadata cascade policy object")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MetadataCascadePolicy type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * &#x60;metadata_cascade_policy&#x60;
   * @return type
  **/
  @Schema(example = "metadata_cascade_policy", description = "`metadata_cascade_policy`")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public MetadataCascadePolicy ownerEnterprise(MetadataCascadePolicyOwnerEnterprise ownerEnterprise) {
    this.ownerEnterprise = ownerEnterprise;
    return this;
  }

   /**
   * Get ownerEnterprise
   * @return ownerEnterprise
  **/
  @Schema(description = "")
  public MetadataCascadePolicyOwnerEnterprise getOwnerEnterprise() {
    return ownerEnterprise;
  }

  public void setOwnerEnterprise(MetadataCascadePolicyOwnerEnterprise ownerEnterprise) {
    this.ownerEnterprise = ownerEnterprise;
  }

  public MetadataCascadePolicy parent(MetadataCascadePolicyParent parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(description = "")
  public MetadataCascadePolicyParent getParent() {
    return parent;
  }

  public void setParent(MetadataCascadePolicyParent parent) {
    this.parent = parent;
  }

  public MetadataCascadePolicy scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the of the template that is cascaded down to the folder&#x27;s children.
   * @return scope
  **/
  @Schema(example = "global", description = "The scope of the of the template that is cascaded down to the folder's children.")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public MetadataCascadePolicy templateKey(String templateKey) {
    this.templateKey = templateKey;
    return this;
  }

   /**
   * The key of the template that is cascaded down to the folder&#x27;s children.  In many cases the template key is automatically derived of its display name, for example &#x60;Contract Template&#x60; would become &#x60;contractTemplate&#x60;. In some cases the creator of the template will have provided its own template key.  Please [list the templates for an enterprise][list], or get all instances on a [file][file] or [folder][folder] to inspect a template&#x27;s key.  [list]: e://get-metadata-templates-enterprise [file]: e://get-files-id-metadata [folder]: e://get-folders-id-metadata
   * @return templateKey
  **/
  @Schema(example = "productInfo", description = "The key of the template that is cascaded down to the folder's children.  In many cases the template key is automatically derived of its display name, for example `Contract Template` would become `contractTemplate`. In some cases the creator of the template will have provided its own template key.  Please [list the templates for an enterprise][list], or get all instances on a [file][file] or [folder][folder] to inspect a template's key.  [list]: e://get-metadata-templates-enterprise [file]: e://get-files-id-metadata [folder]: e://get-folders-id-metadata")
  public String getTemplateKey() {
    return templateKey;
  }

  public void setTemplateKey(String templateKey) {
    this.templateKey = templateKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataCascadePolicy metadataCascadePolicy = (MetadataCascadePolicy) o;
    return Objects.equals(this.id, metadataCascadePolicy.id) &&
        Objects.equals(this.type, metadataCascadePolicy.type) &&
        Objects.equals(this.ownerEnterprise, metadataCascadePolicy.ownerEnterprise) &&
        Objects.equals(this.parent, metadataCascadePolicy.parent) &&
        Objects.equals(this.scope, metadataCascadePolicy.scope) &&
        Objects.equals(this.templateKey, metadataCascadePolicy.templateKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, ownerEnterprise, parent, scope, templateKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataCascadePolicy {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ownerEnterprise: ").append(toIndentedString(ownerEnterprise)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    templateKey: ").append(toIndentedString(templateKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
