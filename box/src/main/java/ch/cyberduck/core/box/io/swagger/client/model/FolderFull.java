/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.Folder;
import ch.cyberduck.core.box.io.swagger.client.model.FolderFolderUploadEmail;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * A full representation of a folder, as can be returned from any folder API endpoints by default
 */
@Schema(description = "A full representation of a folder, as can be returned from any folder API endpoints by default")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class FolderFull extends Folder {
  @JsonProperty("sync_state")
  private Object syncState = null;

  @JsonProperty("has_collaborations")
  private Boolean hasCollaborations = null;

  @JsonProperty("permissions")
  private Object permissions = null;

  @JsonProperty("tags")
  private Object tags = null;

  @JsonProperty("can_non_owners_invite")
  private Object canNonOwnersInvite = null;

  @JsonProperty("is_externally_owned")
  private Boolean isExternallyOwned = null;

  @JsonProperty("metadata")
  private Object metadata = null;

  @JsonProperty("is_collaboration_restricted_to_enterprise")
  private Object isCollaborationRestrictedToEnterprise = null;

  /**
   * Gets or Sets allowedSharedLinkAccessLevels
   */
  public enum AllowedSharedLinkAccessLevelsEnum {
    OPEN("open"),
    COMPANY("company"),
    COLLABORATORS("collaborators");

    private String value;

    AllowedSharedLinkAccessLevelsEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AllowedSharedLinkAccessLevelsEnum fromValue(String text) {
      for (AllowedSharedLinkAccessLevelsEnum b : AllowedSharedLinkAccessLevelsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("allowed_shared_link_access_levels")
  private List<AllowedSharedLinkAccessLevelsEnum> allowedSharedLinkAccessLevels = null;

  /**
   * Gets or Sets allowedInviteeRoles
   */
  public enum AllowedInviteeRolesEnum {
    EDITOR("editor"),
    VIEWER("viewer"),
    PREVIEWER("previewer"),
    UPLOADER("uploader"),
    PREVIEWER_UPLOADER("previewer uploader"),
    VIEWER_UPLOADER("viewer uploader"),
    CO_OWNER("co-owner");

    private String value;

    AllowedInviteeRolesEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AllowedInviteeRolesEnum fromValue(String text) {
      for (AllowedInviteeRolesEnum b : AllowedInviteeRolesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("allowed_invitee_roles")
  private List<AllowedInviteeRolesEnum> allowedInviteeRoles = null;

  @JsonProperty("watermark_info")
  private Object watermarkInfo = null;

  @JsonProperty("can_non_owners_view_collaborators")
  private Boolean canNonOwnersViewCollaborators = null;

  @JsonProperty("classification")
  private Object classification = null;

  public FolderFull syncState(Object syncState) {
    this.syncState = syncState;
    return this;
  }

   /**
   * Get syncState
   * @return syncState
  **/
  @Schema(description = "")
  public Object getSyncState() {
    return syncState;
  }

  public void setSyncState(Object syncState) {
    this.syncState = syncState;
  }

  public FolderFull hasCollaborations(Boolean hasCollaborations) {
    this.hasCollaborations = hasCollaborations;
    return this;
  }

   /**
   * Specifies if this folder has any other collaborators.
   * @return hasCollaborations
  **/
  @Schema(example = "true", description = "Specifies if this folder has any other collaborators.")
  public Boolean isHasCollaborations() {
    return hasCollaborations;
  }

  public void setHasCollaborations(Boolean hasCollaborations) {
    this.hasCollaborations = hasCollaborations;
  }

  public FolderFull permissions(Object permissions) {
    this.permissions = permissions;
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @Schema(description = "")
  public Object getPermissions() {
    return permissions;
  }

  public void setPermissions(Object permissions) {
    this.permissions = permissions;
  }

  public FolderFull tags(Object tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public Object getTags() {
    return tags;
  }

  public void setTags(Object tags) {
    this.tags = tags;
  }

  public FolderFull canNonOwnersInvite(Object canNonOwnersInvite) {
    this.canNonOwnersInvite = canNonOwnersInvite;
    return this;
  }

   /**
   * Get canNonOwnersInvite
   * @return canNonOwnersInvite
  **/
  @Schema(description = "")
  public Object getCanNonOwnersInvite() {
    return canNonOwnersInvite;
  }

  public void setCanNonOwnersInvite(Object canNonOwnersInvite) {
    this.canNonOwnersInvite = canNonOwnersInvite;
  }

  public FolderFull isExternallyOwned(Boolean isExternallyOwned) {
    this.isExternallyOwned = isExternallyOwned;
    return this;
  }

   /**
   * Specifies if this folder is owned by a user outside of the authenticated enterprise.
   * @return isExternallyOwned
  **/
  @Schema(example = "true", description = "Specifies if this folder is owned by a user outside of the authenticated enterprise.")
  public Boolean isIsExternallyOwned() {
    return isExternallyOwned;
  }

  public void setIsExternallyOwned(Boolean isExternallyOwned) {
    this.isExternallyOwned = isExternallyOwned;
  }

  public FolderFull metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @Schema(description = "")
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }

  public FolderFull isCollaborationRestrictedToEnterprise(Object isCollaborationRestrictedToEnterprise) {
    this.isCollaborationRestrictedToEnterprise = isCollaborationRestrictedToEnterprise;
    return this;
  }

   /**
   * Get isCollaborationRestrictedToEnterprise
   * @return isCollaborationRestrictedToEnterprise
  **/
  @Schema(description = "")
  public Object getIsCollaborationRestrictedToEnterprise() {
    return isCollaborationRestrictedToEnterprise;
  }

  public void setIsCollaborationRestrictedToEnterprise(Object isCollaborationRestrictedToEnterprise) {
    this.isCollaborationRestrictedToEnterprise = isCollaborationRestrictedToEnterprise;
  }

  public FolderFull allowedSharedLinkAccessLevels(List<AllowedSharedLinkAccessLevelsEnum> allowedSharedLinkAccessLevels) {
    this.allowedSharedLinkAccessLevels = allowedSharedLinkAccessLevels;
    return this;
  }

  public FolderFull addAllowedSharedLinkAccessLevelsItem(AllowedSharedLinkAccessLevelsEnum allowedSharedLinkAccessLevelsItem) {
    if (this.allowedSharedLinkAccessLevels == null) {
      this.allowedSharedLinkAccessLevels = new ArrayList<>();
    }
    this.allowedSharedLinkAccessLevels.add(allowedSharedLinkAccessLevelsItem);
    return this;
  }

   /**
   * A list of access levels that are available for this folder.  For some folders, like the root folder, this will always be an empty list as sharing is not allowed at that level.
   * @return allowedSharedLinkAccessLevels
  **/
  @Schema(example = "[\"open\"]", description = "A list of access levels that are available for this folder.  For some folders, like the root folder, this will always be an empty list as sharing is not allowed at that level.")
  public List<AllowedSharedLinkAccessLevelsEnum> getAllowedSharedLinkAccessLevels() {
    return allowedSharedLinkAccessLevels;
  }

  public void setAllowedSharedLinkAccessLevels(List<AllowedSharedLinkAccessLevelsEnum> allowedSharedLinkAccessLevels) {
    this.allowedSharedLinkAccessLevels = allowedSharedLinkAccessLevels;
  }

  public FolderFull allowedInviteeRoles(List<AllowedInviteeRolesEnum> allowedInviteeRoles) {
    this.allowedInviteeRoles = allowedInviteeRoles;
    return this;
  }

  public FolderFull addAllowedInviteeRolesItem(AllowedInviteeRolesEnum allowedInviteeRolesItem) {
    if (this.allowedInviteeRoles == null) {
      this.allowedInviteeRoles = new ArrayList<>();
    }
    this.allowedInviteeRoles.add(allowedInviteeRolesItem);
    return this;
  }

   /**
   * A list of the types of roles that user can be invited at when sharing this folder.
   * @return allowedInviteeRoles
  **/
  @Schema(example = "[\"editor\"]", description = "A list of the types of roles that user can be invited at when sharing this folder.")
  public List<AllowedInviteeRolesEnum> getAllowedInviteeRoles() {
    return allowedInviteeRoles;
  }

  public void setAllowedInviteeRoles(List<AllowedInviteeRolesEnum> allowedInviteeRoles) {
    this.allowedInviteeRoles = allowedInviteeRoles;
  }

  public FolderFull watermarkInfo(Object watermarkInfo) {
    this.watermarkInfo = watermarkInfo;
    return this;
  }

   /**
   * Get watermarkInfo
   * @return watermarkInfo
  **/
  @Schema(description = "")
  public Object getWatermarkInfo() {
    return watermarkInfo;
  }

  public void setWatermarkInfo(Object watermarkInfo) {
    this.watermarkInfo = watermarkInfo;
  }

  public FolderFull canNonOwnersViewCollaborators(Boolean canNonOwnersViewCollaborators) {
    this.canNonOwnersViewCollaborators = canNonOwnersViewCollaborators;
    return this;
  }

   /**
   * Specifies if collaborators who are not owners of this folder are restricted from viewing other collaborations on this folder.  It also restricts non-owners from inviting new collaborators.
   * @return canNonOwnersViewCollaborators
  **/
  @Schema(example = "true", description = "Specifies if collaborators who are not owners of this folder are restricted from viewing other collaborations on this folder.  It also restricts non-owners from inviting new collaborators.")
  public Boolean isCanNonOwnersViewCollaborators() {
    return canNonOwnersViewCollaborators;
  }

  public void setCanNonOwnersViewCollaborators(Boolean canNonOwnersViewCollaborators) {
    this.canNonOwnersViewCollaborators = canNonOwnersViewCollaborators;
  }

  public FolderFull classification(Object classification) {
    this.classification = classification;
    return this;
  }

   /**
   * Get classification
   * @return classification
  **/
  @Schema(description = "")
  public Object getClassification() {
    return classification;
  }

  public void setClassification(Object classification) {
    this.classification = classification;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderFull folderFull = (FolderFull) o;
    return Objects.equals(this.syncState, folderFull.syncState) &&
        Objects.equals(this.hasCollaborations, folderFull.hasCollaborations) &&
        Objects.equals(this.permissions, folderFull.permissions) &&
        Objects.equals(this.tags, folderFull.tags) &&
        Objects.equals(this.canNonOwnersInvite, folderFull.canNonOwnersInvite) &&
        Objects.equals(this.isExternallyOwned, folderFull.isExternallyOwned) &&
        Objects.equals(this.metadata, folderFull.metadata) &&
        Objects.equals(this.isCollaborationRestrictedToEnterprise, folderFull.isCollaborationRestrictedToEnterprise) &&
        Objects.equals(this.allowedSharedLinkAccessLevels, folderFull.allowedSharedLinkAccessLevels) &&
        Objects.equals(this.allowedInviteeRoles, folderFull.allowedInviteeRoles) &&
        Objects.equals(this.watermarkInfo, folderFull.watermarkInfo) &&
        Objects.equals(this.canNonOwnersViewCollaborators, folderFull.canNonOwnersViewCollaborators) &&
        Objects.equals(this.classification, folderFull.classification) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(syncState, hasCollaborations, permissions, tags, canNonOwnersInvite, isExternallyOwned, metadata, isCollaborationRestrictedToEnterprise, allowedSharedLinkAccessLevels, allowedInviteeRoles, watermarkInfo, canNonOwnersViewCollaborators, classification, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderFull {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    syncState: ").append(toIndentedString(syncState)).append("\n");
    sb.append("    hasCollaborations: ").append(toIndentedString(hasCollaborations)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    canNonOwnersInvite: ").append(toIndentedString(canNonOwnersInvite)).append("\n");
    sb.append("    isExternallyOwned: ").append(toIndentedString(isExternallyOwned)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    isCollaborationRestrictedToEnterprise: ").append(toIndentedString(isCollaborationRestrictedToEnterprise)).append("\n");
    sb.append("    allowedSharedLinkAccessLevels: ").append(toIndentedString(allowedSharedLinkAccessLevels)).append("\n");
    sb.append("    allowedInviteeRoles: ").append(toIndentedString(allowedInviteeRoles)).append("\n");
    sb.append("    watermarkInfo: ").append(toIndentedString(watermarkInfo)).append("\n");
    sb.append("    canNonOwnersViewCollaborators: ").append(toIndentedString(canNonOwnersViewCollaborators)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
