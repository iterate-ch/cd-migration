/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement {
  @JsonProperty("is_accepted")
  private Boolean isAccepted = null;

  @JsonProperty("terms_of_service")
  private AllOfCollaborationAcceptanceRequirementsStatusTermsOfServiceRequirementTermsOfService termsOfService = null;

  public CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement isAccepted(Boolean isAccepted) {
    this.isAccepted = isAccepted;
    return this;
  }

   /**
   * Whether or not the terms of service have been accepted.  The field is &#x60;null&#x60; when there is no terms of service required.
   * @return isAccepted
  **/
  @Schema(example = "true", description = "Whether or not the terms of service have been accepted.  The field is `null` when there is no terms of service required.")
  public Boolean isIsAccepted() {
    return isAccepted;
  }

  public void setIsAccepted(Boolean isAccepted) {
    this.isAccepted = isAccepted;
  }

  public CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement termsOfService(AllOfCollaborationAcceptanceRequirementsStatusTermsOfServiceRequirementTermsOfService termsOfService) {
    this.termsOfService = termsOfService;
    return this;
  }

   /**
   * Get termsOfService
   * @return termsOfService
  **/
  @Schema(description = "")
  public AllOfCollaborationAcceptanceRequirementsStatusTermsOfServiceRequirementTermsOfService getTermsOfService() {
    return termsOfService;
  }

  public void setTermsOfService(AllOfCollaborationAcceptanceRequirementsStatusTermsOfServiceRequirementTermsOfService termsOfService) {
    this.termsOfService = termsOfService;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement collaborationAcceptanceRequirementsStatusTermsOfServiceRequirement = (CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement) o;
    return Objects.equals(this.isAccepted, collaborationAcceptanceRequirementsStatusTermsOfServiceRequirement.isAccepted) &&
        Objects.equals(this.termsOfService, collaborationAcceptanceRequirementsStatusTermsOfServiceRequirement.termsOfService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isAccepted, termsOfService);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollaborationAcceptanceRequirementsStatusTermsOfServiceRequirement {\n");
    
    sb.append("    isAccepted: ").append(toIndentedString(isAccepted)).append("\n");
    sb.append("    termsOfService: ").append(toIndentedString(termsOfService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
