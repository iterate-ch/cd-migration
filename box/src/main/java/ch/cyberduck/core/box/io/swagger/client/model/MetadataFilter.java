/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * A metadata template to filter the search results by.
 */
@Schema(description = "A metadata template to filter the search results by.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class MetadataFilter {
  /**
   * Specifies the scope of the template to filter search results by.  This will be &#x60;enterprise_{enterprise_id}&#x60; for templates defined for use in this enterprise, and &#x60;global&#x60; for general templates that are available to all enterprises using Box.
   */
  public enum ScopeEnum {
    GLOBAL("global"),
    ENTERPRISE("enterprise"),
    ENTERPRISE__ENTERPRISE_ID_("enterprise_{enterprise_id}");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ScopeEnum fromValue(String text) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("scope")
  private ScopeEnum scope = null;

  @JsonProperty("templateKey")
  private String templateKey = null;

  @JsonProperty("filters")
  private AllOfMetadataFilterFilters filters = null;

  public MetadataFilter scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Specifies the scope of the template to filter search results by.  This will be &#x60;enterprise_{enterprise_id}&#x60; for templates defined for use in this enterprise, and &#x60;global&#x60; for general templates that are available to all enterprises using Box.
   * @return scope
  **/
  @Schema(example = "enterprise", description = "Specifies the scope of the template to filter search results by.  This will be `enterprise_{enterprise_id}` for templates defined for use in this enterprise, and `global` for general templates that are available to all enterprises using Box.")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public MetadataFilter templateKey(String templateKey) {
    this.templateKey = templateKey;
    return this;
  }

   /**
   * The key of the template to filter search results by.  In many cases the template key is automatically derived of its display name, for example &#x60;Contract Template&#x60; would become &#x60;contractTemplate&#x60;. In some cases the creator of the template will have provided its own template key.  Please [list the templates for an enterprise][list], or get all instances on a [file][file] or [folder][folder] to inspect a template&#x27;s key.  [list]: e://get-metadata-templates-enterprise [file]: e://get-files-id-metadata [folder]: e://get-folders-id-metadata
   * @return templateKey
  **/
  @Schema(example = "contract", description = "The key of the template to filter search results by.  In many cases the template key is automatically derived of its display name, for example `Contract Template` would become `contractTemplate`. In some cases the creator of the template will have provided its own template key.  Please [list the templates for an enterprise][list], or get all instances on a [file][file] or [folder][folder] to inspect a template's key.  [list]: e://get-metadata-templates-enterprise [file]: e://get-files-id-metadata [folder]: e://get-folders-id-metadata")
  public String getTemplateKey() {
    return templateKey;
  }

  public void setTemplateKey(String templateKey) {
    this.templateKey = templateKey;
  }

  public MetadataFilter filters(AllOfMetadataFilterFilters filters) {
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @Schema(description = "")
  public AllOfMetadataFilterFilters getFilters() {
    return filters;
  }

  public void setFilters(AllOfMetadataFilterFilters filters) {
    this.filters = filters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataFilter metadataFilter = (MetadataFilter) o;
    return Objects.equals(this.scope, metadataFilter.scope) &&
        Objects.equals(this.templateKey, metadataFilter.templateKey) &&
        Objects.equals(this.filters, metadataFilter.filters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, templateKey, filters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataFilter {\n");
    
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    templateKey: ").append(toIndentedString(templateKey)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
