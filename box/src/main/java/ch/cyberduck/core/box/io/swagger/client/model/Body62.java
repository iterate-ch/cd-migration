/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * Body62
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class Body62 {
  @JsonProperty("policy_name")
  private String policyName = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("filter_started_at")
  private DateTime filterStartedAt = null;

  @JsonProperty("filter_ended_at")
  private DateTime filterEndedAt = null;

  @JsonProperty("is_ongoing")
  private Boolean isOngoing = null;

  public Body62 policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

   /**
   * The name of the policy.
   * @return policyName
  **/
  @Schema(example = "Sales Policy", required = true, description = "The name of the policy.")
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }

  public Body62 description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description for the policy.
   * @return description
  **/
  @Schema(example = "A custom policy for the sales team", description = "A description for the policy.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Body62 filterStartedAt(DateTime filterStartedAt) {
    this.filterStartedAt = filterStartedAt;
    return this;
  }

   /**
   * The filter start date.  When this policy is applied using a &#x60;custodian&#x60; legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if &#x60;is_ongoing&#x60; is set to &#x60;false&#x60;.
   * @return filterStartedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "The filter start date.  When this policy is applied using a `custodian` legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if `is_ongoing` is set to `false`.")
  public DateTime getFilterStartedAt() {
    return filterStartedAt;
  }

  public void setFilterStartedAt(DateTime filterStartedAt) {
    this.filterStartedAt = filterStartedAt;
  }

  public Body62 filterEndedAt(DateTime filterEndedAt) {
    this.filterEndedAt = filterEndedAt;
    return this;
  }

   /**
   * The filter end date.  When this policy is applied using a &#x60;custodian&#x60; legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if &#x60;is_ongoing&#x60; is set to &#x60;false&#x60;.
   * @return filterEndedAt
  **/
  @Schema(example = "2012-12-18T10:53:43-08:00", description = "The filter end date.  When this policy is applied using a `custodian` legal hold assignments, it will only apply to file versions created or uploaded inside of the date range. Other assignment types, such as folders and files, will ignore the date filter.  Required if `is_ongoing` is set to `false`.")
  public DateTime getFilterEndedAt() {
    return filterEndedAt;
  }

  public void setFilterEndedAt(DateTime filterEndedAt) {
    this.filterEndedAt = filterEndedAt;
  }

  public Body62 isOngoing(Boolean isOngoing) {
    this.isOngoing = isOngoing;
    return this;
  }

   /**
   * Whether new assignments under this policy should continue applying to files even after initialization.  When this policy is applied using a legal hold assignment, it will continue applying the policy to any new file versions even after it has been applied.  For example, if a legal hold assignment is placed on a user today, and that user uploads a file tomorrow, that file will get held. This will continue until the policy is retired.  Required if no filter dates are set.
   * @return isOngoing
  **/
  @Schema(example = "true", description = "Whether new assignments under this policy should continue applying to files even after initialization.  When this policy is applied using a legal hold assignment, it will continue applying the policy to any new file versions even after it has been applied.  For example, if a legal hold assignment is placed on a user today, and that user uploads a file tomorrow, that file will get held. This will continue until the policy is retired.  Required if no filter dates are set.")
  public Boolean isIsOngoing() {
    return isOngoing;
  }

  public void setIsOngoing(Boolean isOngoing) {
    this.isOngoing = isOngoing;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body62 body62 = (Body62) o;
    return Objects.equals(this.policyName, body62.policyName) &&
        Objects.equals(this.description, body62.description) &&
        Objects.equals(this.filterStartedAt, body62.filterStartedAt) &&
        Objects.equals(this.filterEndedAt, body62.filterEndedAt) &&
        Objects.equals(this.isOngoing, body62.isOngoing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyName, description, filterStartedAt, filterEndedAt, isOngoing);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body62 {\n");
    
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    filterStartedAt: ").append(toIndentedString(filterStartedAt)).append("\n");
    sb.append("    filterEndedAt: ").append(toIndentedString(filterEndedAt)).append("\n");
    sb.append("    isOngoing: ").append(toIndentedString(isOngoing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
