/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Represents a successful request to create a &#x60;zip&#x60; archive of a list of files and folders.
 */
@Schema(description = "Represents a successful request to create a `zip` archive of a list of files and folders.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class ZipDownload {
  @JsonProperty("download_url")
  private String downloadUrl = null;

  @JsonProperty("status_url")
  private String statusUrl = null;

  @JsonProperty("expires_at")
  private DateTime expiresAt = null;

  @JsonProperty("name_conflicts")
  private List<List<Object>> nameConflicts = null;

  public ZipDownload downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

   /**
   * The URL that can be used to download the &#x60;zip&#x60; archive. A &#x60;Get&#x60; request to this URL will start streaming the items requested. By default, this URL is only valid for a few seconds, until the &#x60;exires_at&#x60; time, unless a download is started after which it is valid for the duration of the download.  It is important to note that the domain and path of this URL might change between API calls, and therefore it&#x27;s important to use this URL as-is.
   * @return downloadUrl
  **/
  @Schema(example = "https://dl.boxcloud.com/2.0/zip_downloads/Lu6fA9Ob-jyysp3AAvMF4AkLEwZwAYbL=tgj2zIC=eK9RvJnJbjJl9rNh2qBgHDpyOCAOhpM=vajg2mKq8Mdd/content", description = "The URL that can be used to download the `zip` archive. A `Get` request to this URL will start streaming the items requested. By default, this URL is only valid for a few seconds, until the `exires_at` time, unless a download is started after which it is valid for the duration of the download.  It is important to note that the domain and path of this URL might change between API calls, and therefore it's important to use this URL as-is.")
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }

  public ZipDownload statusUrl(String statusUrl) {
    this.statusUrl = statusUrl;
    return this;
  }

   /**
   * The URL that can be used to get the status of the &#x60;zip&#x60; archive being downloaded. A &#x60;Get&#x60; request to this URL will return the number of files in the archive as well as the number of items already downloaded or skipped. By default, this URL is only valid for a few seconds, until the &#x60;exires_at&#x60; time, unless a download is started after which the URL is valid for 12 hours from the start of the download.  It is important to note that the domain and path of this URL might change between API calls, and therefore it&#x27;s important to use this URL as-is.
   * @return statusUrl
  **/
  @Schema(example = "https://api.box.com/2.0/zip_downloads/Lu6fA9Ob-jyysp3AAvMF4AkLEwZwAYbL=tgj2zIC=eK9RvJnJbjJl9rNh2qBgHDpyOCAOhpM=vajg2mKq8Mdd/status", description = "The URL that can be used to get the status of the `zip` archive being downloaded. A `Get` request to this URL will return the number of files in the archive as well as the number of items already downloaded or skipped. By default, this URL is only valid for a few seconds, until the `exires_at` time, unless a download is started after which the URL is valid for 12 hours from the start of the download.  It is important to note that the domain and path of this URL might change between API calls, and therefore it's important to use this URL as-is.")
  public String getStatusUrl() {
    return statusUrl;
  }

  public void setStatusUrl(String statusUrl) {
    this.statusUrl = statusUrl;
  }

  public ZipDownload expiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The time and date when this archive will expire. After this time the &#x60;status_url&#x60; and &#x60;download_url&#x60; will return an error.  By default, these URLs are only valid for a few seconds, unless a download is started after which the &#x60;download_url&#x60; is valid for the duration of the download, and the &#x60;status_url&#x60; is valid for 12 hours from the start of the download.
   * @return expiresAt
  **/
  @Schema(example = "2019-08-29T23:59-07:00", description = "The time and date when this archive will expire. After this time the `status_url` and `download_url` will return an error.  By default, these URLs are only valid for a few seconds, unless a download is started after which the `download_url` is valid for the duration of the download, and the `status_url` is valid for 12 hours from the start of the download.")
  public DateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
  }

  public ZipDownload nameConflicts(List<List<Object>> nameConflicts) {
    this.nameConflicts = nameConflicts;
    return this;
  }

  public ZipDownload addNameConflictsItem(List<Object> nameConflictsItem) {
    if (this.nameConflicts == null) {
      this.nameConflicts = new ArrayList<>();
    }
    this.nameConflicts.add(nameConflictsItem);
    return this;
  }

   /**
   * A list of conflicts that occurred when trying to create the archive. This would occur when multiple items have been requested with the same name.  To solve these conflicts, the API will automatically rename an item and return a mapping between the original item&#x27;s name and its new name.  For every conflict, both files will be renamed and therefore this list will always be a multiple of 2.
   * @return nameConflicts
  **/
  @Schema(description = "A list of conflicts that occurred when trying to create the archive. This would occur when multiple items have been requested with the same name.  To solve these conflicts, the API will automatically rename an item and return a mapping between the original item's name and its new name.  For every conflict, both files will be renamed and therefore this list will always be a multiple of 2.")
  public List<List<Object>> getNameConflicts() {
    return nameConflicts;
  }

  public void setNameConflicts(List<List<Object>> nameConflicts) {
    this.nameConflicts = nameConflicts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZipDownload zipDownload = (ZipDownload) o;
    return Objects.equals(this.downloadUrl, zipDownload.downloadUrl) &&
        Objects.equals(this.statusUrl, zipDownload.statusUrl) &&
        Objects.equals(this.expiresAt, zipDownload.expiresAt) &&
        Objects.equals(this.nameConflicts, zipDownload.nameConflicts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadUrl, statusUrl, expiresAt, nameConflicts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZipDownload {\n");
    
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    statusUrl: ").append(toIndentedString(statusUrl)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    nameConflicts: ").append(toIndentedString(nameConflicts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
