/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * A request for a new OAuth 2.0 token
 */
@Schema(description = "A request for a new OAuth 2.0 token")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class PostOAuth2Token {
  /**
   * The type of request being made, either using a client-side obtained authorization code, a refresh token, a JWT assertion, client credentials grant or another access token for the purpose of downscoping a token.
   */
  public enum GrantTypeEnum {
    AUTHORIZATION_CODE("authorization_code"),
    REFRESH_TOKEN("refresh_token"),
    CLIENT_CREDENTIALS("client_credentials"),
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_JWT_BEARER("urn:ietf:params:oauth:grant-type:jwt-bearer"),
    URN_IETF_PARAMS_OAUTH_GRANT_TYPE_TOKEN_EXCHANGE("urn:ietf:params:oauth:grant-type:token-exchange");

    private String value;

    GrantTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static GrantTypeEnum fromValue(String text) {
      for (GrantTypeEnum b : GrantTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("grant_type")
  private GrantTypeEnum grantType = null;

  @JsonProperty("client_id")
  private String clientId = null;

  @JsonProperty("client_secret")
  private String clientSecret = null;

  @JsonProperty("code")
  private String code = null;

  @JsonProperty("refresh_token")
  private String refreshToken = null;

  @JsonProperty("assertion")
  private String assertion = null;

  @JsonProperty("subject_token")
  private String subjectToken = null;

  /**
   * The type of &#x60;subject_token&#x60; passed in.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;.
   */
  public enum SubjectTokenTypeEnum {
    TOKEN("urn:ietf:params:oauth:token-type:access_token");

    private String value;

    SubjectTokenTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SubjectTokenTypeEnum fromValue(String text) {
      for (SubjectTokenTypeEnum b : SubjectTokenTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("subject_token_type")
  private SubjectTokenTypeEnum subjectTokenType = null;

  @JsonProperty("actor_token")
  private String actorToken = null;

  /**
   * The type of &#x60;actor_token&#x60; passed in.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;.
   */
  public enum ActorTokenTypeEnum {
    TOKEN("urn:ietf:params:oauth:token-type:id_token");

    private String value;

    ActorTokenTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ActorTokenTypeEnum fromValue(String text) {
      for (ActorTokenTypeEnum b : ActorTokenTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("actor_token_type")
  private ActorTokenTypeEnum actorTokenType = null;

  @JsonProperty("scope")
  private String scope = null;

  @JsonProperty("resource")
  private String resource = null;

  /**
   * Used in combination with &#x60;client_credentials&#x60; as the &#x60;grant_type&#x60;.
   */
  public enum BoxSubjectTypeEnum {
    ENTERPRISE("enterprise"),
    USER("user");

    private String value;

    BoxSubjectTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static BoxSubjectTypeEnum fromValue(String text) {
      for (BoxSubjectTypeEnum b : BoxSubjectTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("box_subject_type")
  private BoxSubjectTypeEnum boxSubjectType = null;

  @JsonProperty("box_subject_id")
  private String boxSubjectId = null;

  public PostOAuth2Token grantType(GrantTypeEnum grantType) {
    this.grantType = grantType;
    return this;
  }

   /**
   * The type of request being made, either using a client-side obtained authorization code, a refresh token, a JWT assertion, client credentials grant or another access token for the purpose of downscoping a token.
   * @return grantType
  **/
  @Schema(example = "authorization_code", required = true, description = "The type of request being made, either using a client-side obtained authorization code, a refresh token, a JWT assertion, client credentials grant or another access token for the purpose of downscoping a token.")
  public GrantTypeEnum getGrantType() {
    return grantType;
  }

  public void setGrantType(GrantTypeEnum grantType) {
    this.grantType = grantType;
  }

  public PostOAuth2Token clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * The Client ID of the application requesting an access token.  Used in combination with &#x60;authorization_code&#x60;, &#x60;client_credentials&#x60;, or &#x60;urn:ietf:params:oauth:grant-type:jwt-bearer&#x60; as the &#x60;grant_type&#x60;.
   * @return clientId
  **/
  @Schema(example = "ly1nj6n11vionaie65emwzk575hnnmrk", description = "The Client ID of the application requesting an access token.  Used in combination with `authorization_code`, `client_credentials`, or `urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public PostOAuth2Token clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * The client secret of the application requesting an access token.  Used in combination with &#x60;authorization_code&#x60;, &#x60;client_credentials&#x60;, or &#x60;urn:ietf:params:oauth:grant-type:jwt-bearer&#x60; as the &#x60;grant_type&#x60;.
   * @return clientSecret
  **/
  @Schema(example = "hOzsTeFlT6ko0dme22uGbQal04SBPYc1", description = "The client secret of the application requesting an access token.  Used in combination with `authorization_code`, `client_credentials`, or `urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.")
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }

  public PostOAuth2Token code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The client-side authorization code passed to your application by Box in the browser redirect after the user has successfully granted your application permission to make API calls on their behalf.  Used in combination with &#x60;authorization_code&#x60; as the &#x60;grant_type&#x60;.
   * @return code
  **/
  @Schema(example = "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW", description = "The client-side authorization code passed to your application by Box in the browser redirect after the user has successfully granted your application permission to make API calls on their behalf.  Used in combination with `authorization_code` as the `grant_type`.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public PostOAuth2Token refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * A refresh token used to get a new access token with.  Used in combination with &#x60;refresh_token&#x60; as the &#x60;grant_type&#x60;.
   * @return refreshToken
  **/
  @Schema(example = "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ", description = "A refresh token used to get a new access token with.  Used in combination with `refresh_token` as the `grant_type`.")
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }

  public PostOAuth2Token assertion(String assertion) {
    this.assertion = assertion;
    return this;
  }

   /**
   * A JWT assertion for which to request a new access token.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:jwt-bearer&#x60; as the &#x60;grant_type&#x60;.
   * @return assertion
  **/
  @Schema(example = "xxxxx.yyyyy.zzzzz", description = "A JWT assertion for which to request a new access token.  Used in combination with `urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.")
  public String getAssertion() {
    return assertion;
  }

  public void setAssertion(String assertion) {
    this.assertion = assertion;
  }

  public PostOAuth2Token subjectToken(String subjectToken) {
    this.subjectToken = subjectToken;
    return this;
  }

   /**
   * The token to exchange for a downscoped token. This can be a regular access token, a JWT assertion, or an app token.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;.
   * @return subjectToken
  **/
  @Schema(example = "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ", description = "The token to exchange for a downscoped token. This can be a regular access token, a JWT assertion, or an app token.  Used in combination with `urn:ietf:params:oauth:grant-type:token-exchange` as the `grant_type`.")
  public String getSubjectToken() {
    return subjectToken;
  }

  public void setSubjectToken(String subjectToken) {
    this.subjectToken = subjectToken;
  }

  public PostOAuth2Token subjectTokenType(SubjectTokenTypeEnum subjectTokenType) {
    this.subjectTokenType = subjectTokenType;
    return this;
  }

   /**
   * The type of &#x60;subject_token&#x60; passed in.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;.
   * @return subjectTokenType
  **/
  @Schema(example = "urn:ietf:params:oauth:token-type:access_token", description = "The type of `subject_token` passed in.  Used in combination with `urn:ietf:params:oauth:grant-type:token-exchange` as the `grant_type`.")
  public SubjectTokenTypeEnum getSubjectTokenType() {
    return subjectTokenType;
  }

  public void setSubjectTokenType(SubjectTokenTypeEnum subjectTokenType) {
    this.subjectTokenType = subjectTokenType;
  }

  public PostOAuth2Token actorToken(String actorToken) {
    this.actorToken = actorToken;
    return this;
  }

   /**
   * The token used to create an annotator token. This is a JWT assertion.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;.
   * @return actorToken
  **/
  @Schema(example = "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ", description = "The token used to create an annotator token. This is a JWT assertion.  Used in combination with `urn:ietf:params:oauth:grant-type:token-exchange` as the `grant_type`.")
  public String getActorToken() {
    return actorToken;
  }

  public void setActorToken(String actorToken) {
    this.actorToken = actorToken;
  }

  public PostOAuth2Token actorTokenType(ActorTokenTypeEnum actorTokenType) {
    this.actorTokenType = actorTokenType;
    return this;
  }

   /**
   * The type of &#x60;actor_token&#x60; passed in.  Used in combination with &#x60;urn:ietf:params:oauth:grant-type:token-exchange&#x60; as the &#x60;grant_type&#x60;.
   * @return actorTokenType
  **/
  @Schema(example = "urn:ietf:params:oauth:token-type:id_token", description = "The type of `actor_token` passed in.  Used in combination with `urn:ietf:params:oauth:grant-type:token-exchange` as the `grant_type`.")
  public ActorTokenTypeEnum getActorTokenType() {
    return actorTokenType;
  }

  public void setActorTokenType(ActorTokenTypeEnum actorTokenType) {
    this.actorTokenType = actorTokenType;
  }

  public PostOAuth2Token scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The space-delimited list of scopes that you want apply to the new access token.  The &#x60;subject_token&#x60; will need to have all of these scopes or the call will error with **401 Unauthorized**.
   * @return scope
  **/
  @Schema(example = "item_upload item_preview base_explorer", description = "The space-delimited list of scopes that you want apply to the new access token.  The `subject_token` will need to have all of these scopes or the call will error with **401 Unauthorized**.")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }

  public PostOAuth2Token resource(String resource) {
    this.resource = resource;
    return this;
  }

   /**
   * Full URL for the file that the token should be generated for.
   * @return resource
  **/
  @Schema(example = "https://api.box.com/2.0/files/123456", description = "Full URL for the file that the token should be generated for.")
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }

  public PostOAuth2Token boxSubjectType(BoxSubjectTypeEnum boxSubjectType) {
    this.boxSubjectType = boxSubjectType;
    return this;
  }

   /**
   * Used in combination with &#x60;client_credentials&#x60; as the &#x60;grant_type&#x60;.
   * @return boxSubjectType
  **/
  @Schema(example = "enterprise", description = "Used in combination with `client_credentials` as the `grant_type`.")
  public BoxSubjectTypeEnum getBoxSubjectType() {
    return boxSubjectType;
  }

  public void setBoxSubjectType(BoxSubjectTypeEnum boxSubjectType) {
    this.boxSubjectType = boxSubjectType;
  }

  public PostOAuth2Token boxSubjectId(String boxSubjectId) {
    this.boxSubjectId = boxSubjectId;
    return this;
  }

   /**
   * Used in combination with &#x60;client_credentials&#x60; as the &#x60;grant_type&#x60;. Value is determined by &#x60;box_subject_type&#x60;. If &#x60;user&#x60; use user ID and if &#x60;enterprise&#x60; use enterprise ID.
   * @return boxSubjectId
  **/
  @Schema(example = "123456789", description = "Used in combination with `client_credentials` as the `grant_type`. Value is determined by `box_subject_type`. If `user` use user ID and if `enterprise` use enterprise ID.")
  public String getBoxSubjectId() {
    return boxSubjectId;
  }

  public void setBoxSubjectId(String boxSubjectId) {
    this.boxSubjectId = boxSubjectId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostOAuth2Token postOAuth2Token = (PostOAuth2Token) o;
    return Objects.equals(this.grantType, postOAuth2Token.grantType) &&
        Objects.equals(this.clientId, postOAuth2Token.clientId) &&
        Objects.equals(this.clientSecret, postOAuth2Token.clientSecret) &&
        Objects.equals(this.code, postOAuth2Token.code) &&
        Objects.equals(this.refreshToken, postOAuth2Token.refreshToken) &&
        Objects.equals(this.assertion, postOAuth2Token.assertion) &&
        Objects.equals(this.subjectToken, postOAuth2Token.subjectToken) &&
        Objects.equals(this.subjectTokenType, postOAuth2Token.subjectTokenType) &&
        Objects.equals(this.actorToken, postOAuth2Token.actorToken) &&
        Objects.equals(this.actorTokenType, postOAuth2Token.actorTokenType) &&
        Objects.equals(this.scope, postOAuth2Token.scope) &&
        Objects.equals(this.resource, postOAuth2Token.resource) &&
        Objects.equals(this.boxSubjectType, postOAuth2Token.boxSubjectType) &&
        Objects.equals(this.boxSubjectId, postOAuth2Token.boxSubjectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grantType, clientId, clientSecret, code, refreshToken, assertion, subjectToken, subjectTokenType, actorToken, actorTokenType, scope, resource, boxSubjectType, boxSubjectId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostOAuth2Token {\n");
    
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    assertion: ").append(toIndentedString(assertion)).append("\n");
    sb.append("    subjectToken: ").append(toIndentedString(subjectToken)).append("\n");
    sb.append("    subjectTokenType: ").append(toIndentedString(subjectTokenType)).append("\n");
    sb.append("    actorToken: ").append(toIndentedString(actorToken)).append("\n");
    sb.append("    actorTokenType: ").append(toIndentedString(actorTokenType)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    boxSubjectType: ").append(toIndentedString(boxSubjectType)).append("\n");
    sb.append("    boxSubjectId: ").append(toIndentedString(boxSubjectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
