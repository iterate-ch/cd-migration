/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.MetadataFieldWrite;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Body26
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class Body26 {
  @JsonProperty("scope")
  private String scope = null;

  @JsonProperty("templateKey")
  private String templateKey = null;

  @JsonProperty("displayName")
  private String displayName = null;

  @JsonProperty("hidden")
  private Boolean hidden = false;

  @JsonProperty("fields")
  private List<MetadataFieldWrite> fields = null;

  @JsonProperty("copyInstanceOnItemCopy")
  private Boolean copyInstanceOnItemCopy = false;

  public Body26 scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the metadata template to create. Applications can only create templates for use within the authenticated user&#x27;s enterprise.  This value needs to be set to &#x60;enterprise&#x60;, as &#x60;global&#x60; scopes can not be created by applications.
   * @return scope
  **/
  @Schema(example = "enterprise", required = true, description = "The scope of the metadata template to create. Applications can only create templates for use within the authenticated user's enterprise.  This value needs to be set to `enterprise`, as `global` scopes can not be created by applications.")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }

  public Body26 templateKey(String templateKey) {
    this.templateKey = templateKey;
    return this;
  }

   /**
   * A unique identifier for the template. This identifier needs to be unique across the enterprise for which the metadata template is being created.  When not provided, the API will create a unique &#x60;templateKey&#x60; based on the value of the &#x60;displayName&#x60;.
   * @return templateKey
  **/
  @Schema(example = "productInfo", description = "A unique identifier for the template. This identifier needs to be unique across the enterprise for which the metadata template is being created.  When not provided, the API will create a unique `templateKey` based on the value of the `displayName`.")
  public String getTemplateKey() {
    return templateKey;
  }

  public void setTemplateKey(String templateKey) {
    this.templateKey = templateKey;
  }

  public Body26 displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the template.
   * @return displayName
  **/
  @Schema(example = "Product Info", required = true, description = "The display name of the template.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public Body26 hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Defines if this template is visible in the Box web app UI, or if it is purely intended for usage through the API.
   * @return hidden
  **/
  @Schema(example = "true", description = "Defines if this template is visible in the Box web app UI, or if it is purely intended for usage through the API.")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Body26 fields(List<MetadataFieldWrite> fields) {
    this.fields = fields;
    return this;
  }

  public Body26 addFieldsItem(MetadataFieldWrite fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * An ordered list of template fields which are part of the template. Each field can be a regular text field, date field, number field, as well as a single or multi-select list.
   * @return fields
  **/
  @Schema(description = "An ordered list of template fields which are part of the template. Each field can be a regular text field, date field, number field, as well as a single or multi-select list.")
  public List<MetadataFieldWrite> getFields() {
    return fields;
  }

  public void setFields(List<MetadataFieldWrite> fields) {
    this.fields = fields;
  }

  public Body26 copyInstanceOnItemCopy(Boolean copyInstanceOnItemCopy) {
    this.copyInstanceOnItemCopy = copyInstanceOnItemCopy;
    return this;
  }

   /**
   * Whether or not to copy any metadata attached to a file or folder when it is copied. By default, metadata is not copied along with a file or folder when it is copied.
   * @return copyInstanceOnItemCopy
  **/
  @Schema(example = "true", description = "Whether or not to copy any metadata attached to a file or folder when it is copied. By default, metadata is not copied along with a file or folder when it is copied.")
  public Boolean isCopyInstanceOnItemCopy() {
    return copyInstanceOnItemCopy;
  }

  public void setCopyInstanceOnItemCopy(Boolean copyInstanceOnItemCopy) {
    this.copyInstanceOnItemCopy = copyInstanceOnItemCopy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body26 body26 = (Body26) o;
    return Objects.equals(this.scope, body26.scope) &&
        Objects.equals(this.templateKey, body26.templateKey) &&
        Objects.equals(this.displayName, body26.displayName) &&
        Objects.equals(this.hidden, body26.hidden) &&
        Objects.equals(this.fields, body26.fields) &&
        Objects.equals(this.copyInstanceOnItemCopy, body26.copyInstanceOnItemCopy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, templateKey, displayName, hidden, fields, copyInstanceOnItemCopy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body26 {\n");
    
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    templateKey: ").append(toIndentedString(templateKey)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    copyInstanceOnItemCopy: ").append(toIndentedString(copyInstanceOnItemCopy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
