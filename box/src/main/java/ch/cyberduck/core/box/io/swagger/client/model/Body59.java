/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.RetentionPoliciesCustomNotificationRecipients;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Body59
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class Body59 {
  @JsonProperty("policy_name")
  private String policyName = null;

  /**
   * The type of the retention policy. A retention policy type can either be &#x60;finite&#x60;, where a specific amount of time to retain the content is known upfront, or &#x60;indefinite&#x60;, where the amount of time to retain the content is still unknown.
   */
  public enum PolicyTypeEnum {
    FINITE("finite"),
    INDEFINITE("indefinite");

    private String value;

    PolicyTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PolicyTypeEnum fromValue(String text) {
      for (PolicyTypeEnum b : PolicyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("policy_type")
  private PolicyTypeEnum policyType = null;

  /**
   * The disposition action of the retention policy. This action can be &#x60;permanently_delete&#x60;, which will cause the content retained by the policy to be permanently deleted, or &#x60;remove_retention&#x60;, which will lift the retention policy from the content, allowing it to be deleted by users, once the retention policy has expired.
   */
  public enum DispositionActionEnum {
    PERMANENTLY_DELETE("permanently_delete"),
    REMOVE_RETENTION("remove_retention");

    private String value;

    DispositionActionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static DispositionActionEnum fromValue(String text) {
      for (DispositionActionEnum b : DispositionActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("disposition_action")
  private DispositionActionEnum dispositionAction = null;

  @JsonProperty("retention_length")
  private String retentionLength = null;

  @JsonProperty("can_owner_extend_retention")
  private Boolean canOwnerExtendRetention = null;

  @JsonProperty("are_owners_notified")
  private Boolean areOwnersNotified = null;

  @JsonProperty("custom_notification_recipients")
  private List<RetentionPoliciesCustomNotificationRecipients> customNotificationRecipients = null;

  public Body59 policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

   /**
   * The name for the retention policy
   * @return policyName
  **/
  @Schema(example = "Some Policy Name", required = true, description = "The name for the retention policy")
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }

  public Body59 policyType(PolicyTypeEnum policyType) {
    this.policyType = policyType;
    return this;
  }

   /**
   * The type of the retention policy. A retention policy type can either be &#x60;finite&#x60;, where a specific amount of time to retain the content is known upfront, or &#x60;indefinite&#x60;, where the amount of time to retain the content is still unknown.
   * @return policyType
  **/
  @Schema(example = "finite", required = true, description = "The type of the retention policy. A retention policy type can either be `finite`, where a specific amount of time to retain the content is known upfront, or `indefinite`, where the amount of time to retain the content is still unknown.")
  public PolicyTypeEnum getPolicyType() {
    return policyType;
  }

  public void setPolicyType(PolicyTypeEnum policyType) {
    this.policyType = policyType;
  }

  public Body59 dispositionAction(DispositionActionEnum dispositionAction) {
    this.dispositionAction = dispositionAction;
    return this;
  }

   /**
   * The disposition action of the retention policy. This action can be &#x60;permanently_delete&#x60;, which will cause the content retained by the policy to be permanently deleted, or &#x60;remove_retention&#x60;, which will lift the retention policy from the content, allowing it to be deleted by users, once the retention policy has expired.
   * @return dispositionAction
  **/
  @Schema(example = "permanently_delete", required = true, description = "The disposition action of the retention policy. This action can be `permanently_delete`, which will cause the content retained by the policy to be permanently deleted, or `remove_retention`, which will lift the retention policy from the content, allowing it to be deleted by users, once the retention policy has expired.")
  public DispositionActionEnum getDispositionAction() {
    return dispositionAction;
  }

  public void setDispositionAction(DispositionActionEnum dispositionAction) {
    this.dispositionAction = dispositionAction;
  }

  public Body59 retentionLength(String retentionLength) {
    this.retentionLength = retentionLength;
    return this;
  }

   /**
   * The length of the retention policy. This length specifies the duration in days that the retention policy will be active for after being assigned to content.  If the policy has A &#x60;policy_type&#x60; of &#x60;indefinite&#x60;, the &#x60;retention_length&#x60; will also be &#x60;indefinite&#x60;.
   * @return retentionLength
  **/
  @Schema(example = "365", description = "The length of the retention policy. This length specifies the duration in days that the retention policy will be active for after being assigned to content.  If the policy has A `policy_type` of `indefinite`, the `retention_length` will also be `indefinite`.")
  public String getRetentionLength() {
    return retentionLength;
  }

  public void setRetentionLength(String retentionLength) {
    this.retentionLength = retentionLength;
  }

  public Body59 canOwnerExtendRetention(Boolean canOwnerExtendRetention) {
    this.canOwnerExtendRetention = canOwnerExtendRetention;
    return this;
  }

   /**
   * Whether the owner of a file will be allowed to extend the retention.
   * @return canOwnerExtendRetention
  **/
  @Schema(example = "true", description = "Whether the owner of a file will be allowed to extend the retention.")
  public Boolean isCanOwnerExtendRetention() {
    return canOwnerExtendRetention;
  }

  public void setCanOwnerExtendRetention(Boolean canOwnerExtendRetention) {
    this.canOwnerExtendRetention = canOwnerExtendRetention;
  }

  public Body59 areOwnersNotified(Boolean areOwnersNotified) {
    this.areOwnersNotified = areOwnersNotified;
    return this;
  }

   /**
   * Whether owner and co-owners of a file are notified when the policy nears expiration.
   * @return areOwnersNotified
  **/
  @Schema(example = "true", description = "Whether owner and co-owners of a file are notified when the policy nears expiration.")
  public Boolean isAreOwnersNotified() {
    return areOwnersNotified;
  }

  public void setAreOwnersNotified(Boolean areOwnersNotified) {
    this.areOwnersNotified = areOwnersNotified;
  }

  public Body59 customNotificationRecipients(List<RetentionPoliciesCustomNotificationRecipients> customNotificationRecipients) {
    this.customNotificationRecipients = customNotificationRecipients;
    return this;
  }

  public Body59 addCustomNotificationRecipientsItem(RetentionPoliciesCustomNotificationRecipients customNotificationRecipientsItem) {
    if (this.customNotificationRecipients == null) {
      this.customNotificationRecipients = new ArrayList<>();
    }
    this.customNotificationRecipients.add(customNotificationRecipientsItem);
    return this;
  }

   /**
   * Get customNotificationRecipients
   * @return customNotificationRecipients
  **/
  @Schema(description = "")
  public List<RetentionPoliciesCustomNotificationRecipients> getCustomNotificationRecipients() {
    return customNotificationRecipients;
  }

  public void setCustomNotificationRecipients(List<RetentionPoliciesCustomNotificationRecipients> customNotificationRecipients) {
    this.customNotificationRecipients = customNotificationRecipients;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body59 body59 = (Body59) o;
    return Objects.equals(this.policyName, body59.policyName) &&
        Objects.equals(this.policyType, body59.policyType) &&
        Objects.equals(this.dispositionAction, body59.dispositionAction) &&
        Objects.equals(this.retentionLength, body59.retentionLength) &&
        Objects.equals(this.canOwnerExtendRetention, body59.canOwnerExtendRetention) &&
        Objects.equals(this.areOwnersNotified, body59.areOwnersNotified) &&
        Objects.equals(this.customNotificationRecipients, body59.customNotificationRecipients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyName, policyType, dispositionAction, retentionLength, canOwnerExtendRetention, areOwnersNotified, customNotificationRecipients);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body59 {\n");
    
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    dispositionAction: ").append(toIndentedString(dispositionAction)).append("\n");
    sb.append("    retentionLength: ").append(toIndentedString(retentionLength)).append("\n");
    sb.append("    canOwnerExtendRetention: ").append(toIndentedString(canOwnerExtendRetention)).append("\n");
    sb.append("    areOwnersNotified: ").append(toIndentedString(areOwnersNotified)).append("\n");
    sb.append("    customNotificationRecipients: ").append(toIndentedString(customNotificationRecipients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
