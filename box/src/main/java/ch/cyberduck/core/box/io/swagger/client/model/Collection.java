/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * A collection of items, including files and folders.  Currently, the only collection available is the &#x60;favorites&#x60; collection.  The contents of a collection can be explored in a similar way to which the contents of a folder is explored.
 */
@Schema(description = "A collection of items, including files and folders.  Currently, the only collection available is the `favorites` collection.  The contents of a collection can be explored in a similar way to which the contents of a folder is explored.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class Collection {
  @JsonProperty("id")
  private String id = null;

  /**
   * &#x60;collection&#x60;
   */
  public enum TypeEnum {
    COLLECTION("collection");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  /**
   * The name of the collection.
   */
  public enum NameEnum {
    FAVORITES("Favorites");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static NameEnum fromValue(String text) {
      for (NameEnum b : NameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("name")
  private NameEnum name = null;

  /**
   * The type of the collection. This is used to determine the proper visual treatment for collections.
   */
  public enum CollectionTypeEnum {
    FAVORITES("favorites");

    private String value;

    CollectionTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static CollectionTypeEnum fromValue(String text) {
      for (CollectionTypeEnum b : CollectionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("collection_type")
  private CollectionTypeEnum collectionType = null;

  public Collection id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this collection.
   * @return id
  **/
  @Schema(example = "11446498", description = "The unique identifier for this collection.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Collection type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * &#x60;collection&#x60;
   * @return type
  **/
  @Schema(example = "collection", description = "`collection`")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Collection name(NameEnum name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the collection.
   * @return name
  **/
  @Schema(example = "Favorites", description = "The name of the collection.")
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }

  public Collection collectionType(CollectionTypeEnum collectionType) {
    this.collectionType = collectionType;
    return this;
  }

   /**
   * The type of the collection. This is used to determine the proper visual treatment for collections.
   * @return collectionType
  **/
  @Schema(example = "favorites", description = "The type of the collection. This is used to determine the proper visual treatment for collections.")
  public CollectionTypeEnum getCollectionType() {
    return collectionType;
  }

  public void setCollectionType(CollectionTypeEnum collectionType) {
    this.collectionType = collectionType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collection collection = (Collection) o;
    return Objects.equals(this.id, collection.id) &&
        Objects.equals(this.type, collection.type) &&
        Objects.equals(this.name, collection.name) &&
        Objects.equals(this.collectionType, collection.collectionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, collectionType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collection {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    collectionType: ").append(toIndentedString(collectionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
