/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * A template for metadata that can be applied to files and folders
 */
@Schema(description = "A template for metadata that can be applied to files and folders")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class MetadataTemplate {
  @JsonProperty("id")
  private String id = null;

  /**
   * &#x60;metadata_template&#x60;
   */
  public enum TypeEnum {
    TEMPLATE("metadata_template");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("scope")
  private String scope = null;

  @JsonProperty("templateKey")
  private String templateKey = null;

  @JsonProperty("displayName")
  private String displayName = null;

  @JsonProperty("hidden")
  private Boolean hidden = null;

  @JsonProperty("fields")
  private List<AllOfMetadataTemplateFieldsItems> fields = null;

  @JsonProperty("copyInstanceOnItemCopy")
  private Boolean copyInstanceOnItemCopy = null;

  public MetadataTemplate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the metadata template.
   * @return id
  **/
  @Schema(example = "58063d82-4128-7b43-bba9-92f706befcdf", description = "The ID of the metadata template.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MetadataTemplate type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * &#x60;metadata_template&#x60;
   * @return type
  **/
  @Schema(example = "metadata_template", description = "`metadata_template`")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public MetadataTemplate scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the metadata template can either be &#x60;global&#x60; or &#x60;enterprise_*&#x60;. The &#x60;global&#x60; scope is used for templates that are available to any Box enterprise. The &#x60;enterprise_*&#x60; scope represents templates that have been created within a specific enterprise, where &#x60;*&#x60; will be the ID of that enterprise.
   * @return scope
  **/
  @Schema(example = "enterprise_123456", description = "The scope of the metadata template can either be `global` or `enterprise_*`. The `global` scope is used for templates that are available to any Box enterprise. The `enterprise_*` scope represents templates that have been created within a specific enterprise, where `*` will be the ID of that enterprise.")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }

  public MetadataTemplate templateKey(String templateKey) {
    this.templateKey = templateKey;
    return this;
  }

   /**
   * A unique identifier for the template. This identifier is unique across the &#x60;scope&#x60; of the enterprise to which the metadata template is being applied, yet is not necessarily unique across different enterprises.
   * @return templateKey
  **/
  @Schema(example = "productInfo", description = "A unique identifier for the template. This identifier is unique across the `scope` of the enterprise to which the metadata template is being applied, yet is not necessarily unique across different enterprises.")
  public String getTemplateKey() {
    return templateKey;
  }

  public void setTemplateKey(String templateKey) {
    this.templateKey = templateKey;
  }

  public MetadataTemplate displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the template. This can be seen in the Box web app and mobile apps.
   * @return displayName
  **/
  @Schema(example = "Product Info", description = "The display name of the template. This can be seen in the Box web app and mobile apps.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public MetadataTemplate hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Defines if this template is visible in the Box web app UI, or if it is purely intended for usage through the API.
   * @return hidden
  **/
  @Schema(example = "true", description = "Defines if this template is visible in the Box web app UI, or if it is purely intended for usage through the API.")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public MetadataTemplate fields(List<AllOfMetadataTemplateFieldsItems> fields) {
    this.fields = fields;
    return this;
  }

  public MetadataTemplate addFieldsItem(AllOfMetadataTemplateFieldsItems fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * An ordered list of template fields which are part of the template. Each field can be a regular text field, date field, number field, as well as a single or multi-select list.
   * @return fields
  **/
  @Schema(description = "An ordered list of template fields which are part of the template. Each field can be a regular text field, date field, number field, as well as a single or multi-select list.")
  public List<AllOfMetadataTemplateFieldsItems> getFields() {
    return fields;
  }

  public void setFields(List<AllOfMetadataTemplateFieldsItems> fields) {
    this.fields = fields;
  }

  public MetadataTemplate copyInstanceOnItemCopy(Boolean copyInstanceOnItemCopy) {
    this.copyInstanceOnItemCopy = copyInstanceOnItemCopy;
    return this;
  }

   /**
   * Whether or not to include the metadata when a file or folder is copied.
   * @return copyInstanceOnItemCopy
  **/
  @Schema(example = "true", description = "Whether or not to include the metadata when a file or folder is copied.")
  public Boolean isCopyInstanceOnItemCopy() {
    return copyInstanceOnItemCopy;
  }

  public void setCopyInstanceOnItemCopy(Boolean copyInstanceOnItemCopy) {
    this.copyInstanceOnItemCopy = copyInstanceOnItemCopy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataTemplate metadataTemplate = (MetadataTemplate) o;
    return Objects.equals(this.id, metadataTemplate.id) &&
        Objects.equals(this.type, metadataTemplate.type) &&
        Objects.equals(this.scope, metadataTemplate.scope) &&
        Objects.equals(this.templateKey, metadataTemplate.templateKey) &&
        Objects.equals(this.displayName, metadataTemplate.displayName) &&
        Objects.equals(this.hidden, metadataTemplate.hidden) &&
        Objects.equals(this.fields, metadataTemplate.fields) &&
        Objects.equals(this.copyInstanceOnItemCopy, metadataTemplate.copyInstanceOnItemCopy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, scope, templateKey, displayName, hidden, fields, copyInstanceOnItemCopy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataTemplate {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    templateKey: ").append(toIndentedString(templateKey)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    copyInstanceOnItemCopy: ").append(toIndentedString(copyInstanceOnItemCopy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
