/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.LegalHoldPolicyAssignmentBase;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * Legal Hold Assignments are used to assign Legal Hold Policies to Users, Folders, Files, or File Versions.  Creating a Legal Hold Assignment puts a hold on the File-Versions that belong to the Assignment&#x27;s &#x27;apply-to&#x27; entity.
 */
@Schema(description = "Legal Hold Assignments are used to assign Legal Hold Policies to Users, Folders, Files, or File Versions.  Creating a Legal Hold Assignment puts a hold on the File-Versions that belong to the Assignment's 'apply-to' entity.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class LegalHoldPolicyAssignment extends LegalHoldPolicyAssignmentBase {
  @JsonProperty("legal_hold_policy")
  private Object legalHoldPolicy = null;

  @JsonProperty("assigned_to")
  private Object assignedTo = null;

  @JsonProperty("assigned_by")
  private Object assignedBy = null;

  @JsonProperty("assigned_at")
  private DateTime assignedAt = null;

  @JsonProperty("deleted_at")
  private DateTime deletedAt = null;

  public LegalHoldPolicyAssignment legalHoldPolicy(Object legalHoldPolicy) {
    this.legalHoldPolicy = legalHoldPolicy;
    return this;
  }

   /**
   * Get legalHoldPolicy
   * @return legalHoldPolicy
  **/
  @Schema(description = "")
  public Object getLegalHoldPolicy() {
    return legalHoldPolicy;
  }

  public void setLegalHoldPolicy(Object legalHoldPolicy) {
    this.legalHoldPolicy = legalHoldPolicy;
  }

  public LegalHoldPolicyAssignment assignedTo(Object assignedTo) {
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * Get assignedTo
   * @return assignedTo
  **/
  @Schema(description = "")
  public Object getAssignedTo() {
    return assignedTo;
  }

  public void setAssignedTo(Object assignedTo) {
    this.assignedTo = assignedTo;
  }

  public LegalHoldPolicyAssignment assignedBy(Object assignedBy) {
    this.assignedBy = assignedBy;
    return this;
  }

   /**
   * Get assignedBy
   * @return assignedBy
  **/
  @Schema(description = "")
  public Object getAssignedBy() {
    return assignedBy;
  }

  public void setAssignedBy(Object assignedBy) {
    this.assignedBy = assignedBy;
  }

  public LegalHoldPolicyAssignment assignedAt(DateTime assignedAt) {
    this.assignedAt = assignedAt;
    return this;
  }

   /**
   * When the legal hold policy assignment object was created
   * @return assignedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "When the legal hold policy assignment object was created")
  public DateTime getAssignedAt() {
    return assignedAt;
  }

  public void setAssignedAt(DateTime assignedAt) {
    this.assignedAt = assignedAt;
  }

  public LegalHoldPolicyAssignment deletedAt(DateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * When the assignment release request was sent. (Because it can take time for an assignment to fully delete, this isn&#x27;t quite the same time that the assignment is fully deleted). If null, Assignment was not deleted.
   * @return deletedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "When the assignment release request was sent. (Because it can take time for an assignment to fully delete, this isn't quite the same time that the assignment is fully deleted). If null, Assignment was not deleted.")
  public DateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(DateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalHoldPolicyAssignment legalHoldPolicyAssignment = (LegalHoldPolicyAssignment) o;
    return Objects.equals(this.legalHoldPolicy, legalHoldPolicyAssignment.legalHoldPolicy) &&
        Objects.equals(this.assignedTo, legalHoldPolicyAssignment.assignedTo) &&
        Objects.equals(this.assignedBy, legalHoldPolicyAssignment.assignedBy) &&
        Objects.equals(this.assignedAt, legalHoldPolicyAssignment.assignedAt) &&
        Objects.equals(this.deletedAt, legalHoldPolicyAssignment.deletedAt) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legalHoldPolicy, assignedTo, assignedBy, assignedAt, deletedAt, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalHoldPolicyAssignment {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    legalHoldPolicy: ").append(toIndentedString(legalHoldPolicy)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    assignedBy: ").append(toIndentedString(assignedBy)).append("\n");
    sb.append("    assignedAt: ").append(toIndentedString(assignedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
