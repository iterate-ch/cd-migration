/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The details status of this event.
 */
@Schema(description = "The details status of this event.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class SkillInvocationStatus {
  /**
   * The state of this event.  * &#x60;invoked&#x60; - Triggered the skill with event details to start   applying skill on the file. * &#x60;processing&#x60; - Currently processing. * &#x60;success&#x60; - Completed processing with a success. * &#x60;transient_failure&#x60; - Encountered an issue which can be   retried. * &#x60;permanent_failure&#x60; -  Encountered a permanent issue and   retry would not help.
   */
  public enum StateEnum {
    INVOKED("invoked"),
    PROCESSING("processing"),
    SUCCESS("success"),
    TRANSIENT_FAILURE("transient_failure"),
    PERMANENT_FAILURE("permanent_failure");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("error_code")
  private String errorCode = null;

  @JsonProperty("additional_info")
  private String additionalInfo = null;

  public SkillInvocationStatus state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of this event.  * &#x60;invoked&#x60; - Triggered the skill with event details to start   applying skill on the file. * &#x60;processing&#x60; - Currently processing. * &#x60;success&#x60; - Completed processing with a success. * &#x60;transient_failure&#x60; - Encountered an issue which can be   retried. * &#x60;permanent_failure&#x60; -  Encountered a permanent issue and   retry would not help.
   * @return state
  **/
  @Schema(example = "invoked", description = "The state of this event.  * `invoked` - Triggered the skill with event details to start   applying skill on the file. * `processing` - Currently processing. * `success` - Completed processing with a success. * `transient_failure` - Encountered an issue which can be   retried. * `permanent_failure` -  Encountered a permanent issue and   retry would not help.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public SkillInvocationStatus message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Status information
   * @return message
  **/
  @Schema(example = "Example", description = "Status information")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public SkillInvocationStatus errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Error code information, if error occurred.
   * @return errorCode
  **/
  @Schema(example = "400", description = "Error code information, if error occurred.")
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  public SkillInvocationStatus additionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

   /**
   * Additional status information.
   * @return additionalInfo
  **/
  @Schema(example = "Example", description = "Additional status information.")
  public String getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkillInvocationStatus skillInvocationStatus = (SkillInvocationStatus) o;
    return Objects.equals(this.state, skillInvocationStatus.state) &&
        Objects.equals(this.message, skillInvocationStatus.message) &&
        Objects.equals(this.errorCode, skillInvocationStatus.errorCode) &&
        Objects.equals(this.additionalInfo, skillInvocationStatus.additionalInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, message, errorCode, additionalInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkillInvocationStatus {\n");
    
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
