/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.CollaborationsAccessibleBy;
import ch.cyberduck.core.box.io.swagger.client.model.CollaborationsItem;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * Body33
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class Body33 {
  @JsonProperty("item")
  private CollaborationsItem item = null;

  @JsonProperty("accessible_by")
  private CollaborationsAccessibleBy accessibleBy = null;

  /**
   * The level of access granted.
   */
  public enum RoleEnum {
    EDITOR("editor"),
    VIEWER("viewer"),
    PREVIEWER("previewer"),
    UPLOADER("uploader"),
    PREVIEWER_UPLOADER("previewer uploader"),
    VIEWER_UPLOADER("viewer uploader"),
    CO_OWNER("co-owner");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RoleEnum fromValue(String text) {
      for (RoleEnum b : RoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("role")
  private RoleEnum role = null;

  @JsonProperty("can_view_path")
  private Boolean canViewPath = null;

  @JsonProperty("expires_at")
  private DateTime expiresAt = null;

  public Body33 item(CollaborationsItem item) {
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @Schema(required = true, description = "")
  public CollaborationsItem getItem() {
    return item;
  }

  public void setItem(CollaborationsItem item) {
    this.item = item;
  }

  public Body33 accessibleBy(CollaborationsAccessibleBy accessibleBy) {
    this.accessibleBy = accessibleBy;
    return this;
  }

   /**
   * Get accessibleBy
   * @return accessibleBy
  **/
  @Schema(required = true, description = "")
  public CollaborationsAccessibleBy getAccessibleBy() {
    return accessibleBy;
  }

  public void setAccessibleBy(CollaborationsAccessibleBy accessibleBy) {
    this.accessibleBy = accessibleBy;
  }

  public Body33 role(RoleEnum role) {
    this.role = role;
    return this;
  }

   /**
   * The level of access granted.
   * @return role
  **/
  @Schema(example = "editor", required = true, description = "The level of access granted.")
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }

  public Body33 canViewPath(Boolean canViewPath) {
    this.canViewPath = canViewPath;
    return this;
  }

   /**
   * Determines if the invited users can see the entire parent path to the associated folder. The user will not gain privileges in any parent folder and therefore can not see content the user is not collaborated on.  Be aware that this meaningfully increases the time required to load the invitee&#x27;s **All Files** page. We recommend you limit the number of collaborations with &#x60;can_view_path&#x60; enabled to 1,000 per user.
   * @return canViewPath
  **/
  @Schema(example = "true", description = "Determines if the invited users can see the entire parent path to the associated folder. The user will not gain privileges in any parent folder and therefore can not see content the user is not collaborated on.  Be aware that this meaningfully increases the time required to load the invitee's **All Files** page. We recommend you limit the number of collaborations with `can_view_path` enabled to 1,000 per user.")
  public Boolean isCanViewPath() {
    return canViewPath;
  }

  public void setCanViewPath(Boolean canViewPath) {
    this.canViewPath = canViewPath;
  }

  public Body33 expiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Set the expiration date for the collaboration. At this date, the collaboration will be automatically removed from the item.  This feature will only work if the **Automatically remove invited collaborators: Allow folder owners to extend the expiry date** setting has been enabled in the **Enterprise Settings** of the **Admin Console**. When the setting is not enabled, collaborations can not have an expiry date and a value for this field will be result in an error.
   * @return expiresAt
  **/
  @Schema(example = "2019-08-29T23:59-07:00", description = "Set the expiration date for the collaboration. At this date, the collaboration will be automatically removed from the item.  This feature will only work if the **Automatically remove invited collaborators: Allow folder owners to extend the expiry date** setting has been enabled in the **Enterprise Settings** of the **Admin Console**. When the setting is not enabled, collaborations can not have an expiry date and a value for this field will be result in an error.")
  public DateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body33 body33 = (Body33) o;
    return Objects.equals(this.item, body33.item) &&
        Objects.equals(this.accessibleBy, body33.accessibleBy) &&
        Objects.equals(this.role, body33.role) &&
        Objects.equals(this.canViewPath, body33.canViewPath) &&
        Objects.equals(this.expiresAt, body33.expiresAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(item, accessibleBy, role, canViewPath, expiresAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body33 {\n");
    
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    accessibleBy: ").append(toIndentedString(accessibleBy)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    canViewPath: ").append(toIndentedString(canViewPath)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
