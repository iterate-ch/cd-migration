/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.MetadataOptionWrite;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * A field within a metadata template. Fields can be a basic text, date, or number field, or a list of options.
 */
@Schema(description = "A field within a metadata template. Fields can be a basic text, date, or number field, or a list of options.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class MetadataFieldWrite {
  /**
   * The type of field. The basic fields are a &#x60;string&#x60; field for text, a &#x60;float&#x60; field for numbers, and a &#x60;date&#x60; fields to present the user with a date-time picker.  Additionally, metadata templates support an &#x60;enum&#x60; field for a basic list of items, and &#x60; multiSelect&#x60; field for a similar list of items where the user can select more than one value.
   */
  public enum TypeEnum {
    STRING("string"),
    FLOAT("float"),
    DATE("date"),
    ENUM("enum"),
    MULTISELECT("multiSelect");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("key")
  private String key = null;

  @JsonProperty("displayName")
  private String displayName = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("hidden")
  private Boolean hidden = null;

  @JsonProperty("options")
  private List<MetadataOptionWrite> options = null;

  public MetadataFieldWrite type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of field. The basic fields are a &#x60;string&#x60; field for text, a &#x60;float&#x60; field for numbers, and a &#x60;date&#x60; fields to present the user with a date-time picker.  Additionally, metadata templates support an &#x60;enum&#x60; field for a basic list of items, and &#x60; multiSelect&#x60; field for a similar list of items where the user can select more than one value.
   * @return type
  **/
  @Schema(example = "string", required = true, description = "The type of field. The basic fields are a `string` field for text, a `float` field for numbers, and a `date` fields to present the user with a date-time picker.  Additionally, metadata templates support an `enum` field for a basic list of items, and ` multiSelect` field for a similar list of items where the user can select more than one value.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public MetadataFieldWrite key(String key) {
    this.key = key;
    return this;
  }

   /**
   * A unique identifier for the field. The identifier must be unique within the template to which it belongs.
   * @return key
  **/
  @Schema(example = "category", required = true, description = "A unique identifier for the field. The identifier must be unique within the template to which it belongs.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public MetadataFieldWrite displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the field as it is shown to the user in the web and mobile apps.
   * @return displayName
  **/
  @Schema(example = "Category", required = true, description = "The display name of the field as it is shown to the user in the web and mobile apps.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public MetadataFieldWrite description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the field. This is not shown to the user.
   * @return description
  **/
  @Schema(example = "The category", description = "A description of the field. This is not shown to the user.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public MetadataFieldWrite hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Whether this field is hidden in the UI for the user and can only be set through the API instead.
   * @return hidden
  **/
  @Schema(example = "true", description = "Whether this field is hidden in the UI for the user and can only be set through the API instead.")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public MetadataFieldWrite options(List<MetadataOptionWrite> options) {
    this.options = options;
    return this;
  }

  public MetadataFieldWrite addOptionsItem(MetadataOptionWrite optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * A list of options for this field. This is used in combination with the &#x60;enum&#x60; and &#x60;multiSelect&#x60; field types.
   * @return options
  **/
  @Schema(description = "A list of options for this field. This is used in combination with the `enum` and `multiSelect` field types.")
  public List<MetadataOptionWrite> getOptions() {
    return options;
  }

  public void setOptions(List<MetadataOptionWrite> options) {
    this.options = options;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataFieldWrite metadataFieldWrite = (MetadataFieldWrite) o;
    return Objects.equals(this.type, metadataFieldWrite.type) &&
        Objects.equals(this.key, metadataFieldWrite.key) &&
        Objects.equals(this.displayName, metadataFieldWrite.displayName) &&
        Objects.equals(this.description, metadataFieldWrite.description) &&
        Objects.equals(this.hidden, metadataFieldWrite.hidden) &&
        Objects.equals(this.options, metadataFieldWrite.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, key, displayName, description, hidden, options);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataFieldWrite {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
