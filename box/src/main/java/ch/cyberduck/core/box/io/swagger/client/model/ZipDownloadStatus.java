/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The status of a &#x60;zip&#x60; archive being downloaded.
 */
@Schema(description = "The status of a `zip` archive being downloaded.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class ZipDownloadStatus {
  @JsonProperty("total_file_count")
  private Integer totalFileCount = null;

  @JsonProperty("downloaded_file_count")
  private Integer downloadedFileCount = null;

  @JsonProperty("skipped_file_count")
  private Integer skippedFileCount = null;

  @JsonProperty("skipped_folder_count")
  private Integer skippedFolderCount = null;

  /**
   * The state of the archive being downloaded.
   */
  public enum StateEnum {
    IN_PROGRESS("in_progress"),
    FAILED("failed"),
    SUCCESS("success");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("state")
  private StateEnum state = StateEnum.IN_PROGRESS;

  public ZipDownloadStatus totalFileCount(Integer totalFileCount) {
    this.totalFileCount = totalFileCount;
    return this;
  }

   /**
   * The total number of files in the archive.
   * minimum: 0
   * maximum: 10000
   * @return totalFileCount
  **/
  @Schema(example = "20", description = "The total number of files in the archive.")
  public Integer getTotalFileCount() {
    return totalFileCount;
  }

  public void setTotalFileCount(Integer totalFileCount) {
    this.totalFileCount = totalFileCount;
  }

  public ZipDownloadStatus downloadedFileCount(Integer downloadedFileCount) {
    this.downloadedFileCount = downloadedFileCount;
    return this;
  }

   /**
   * The number of files that have already been downloaded.
   * minimum: 0
   * @return downloadedFileCount
  **/
  @Schema(example = "10", description = "The number of files that have already been downloaded.")
  public Integer getDownloadedFileCount() {
    return downloadedFileCount;
  }

  public void setDownloadedFileCount(Integer downloadedFileCount) {
    this.downloadedFileCount = downloadedFileCount;
  }

  public ZipDownloadStatus skippedFileCount(Integer skippedFileCount) {
    this.skippedFileCount = skippedFileCount;
    return this;
  }

   /**
   * The number of files that have been skipped as they could not be downloaded. In many cases this is due to permission issues that have surfaced between the creation of the request for the archive and the archive being downloaded.
   * minimum: 0
   * @return skippedFileCount
  **/
  @Schema(example = "5", description = "The number of files that have been skipped as they could not be downloaded. In many cases this is due to permission issues that have surfaced between the creation of the request for the archive and the archive being downloaded.")
  public Integer getSkippedFileCount() {
    return skippedFileCount;
  }

  public void setSkippedFileCount(Integer skippedFileCount) {
    this.skippedFileCount = skippedFileCount;
  }

  public ZipDownloadStatus skippedFolderCount(Integer skippedFolderCount) {
    this.skippedFolderCount = skippedFolderCount;
    return this;
  }

   /**
   * The number of folders that have been skipped as they could not be downloaded. In many cases this is due to permission issues that have surfaced between the creation of the request for the archive and the archive being downloaded.
   * minimum: 0
   * @return skippedFolderCount
  **/
  @Schema(example = "5", description = "The number of folders that have been skipped as they could not be downloaded. In many cases this is due to permission issues that have surfaced between the creation of the request for the archive and the archive being downloaded.")
  public Integer getSkippedFolderCount() {
    return skippedFolderCount;
  }

  public void setSkippedFolderCount(Integer skippedFolderCount) {
    this.skippedFolderCount = skippedFolderCount;
  }

  public ZipDownloadStatus state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the archive being downloaded.
   * @return state
  **/
  @Schema(example = "success", description = "The state of the archive being downloaded.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZipDownloadStatus zipDownloadStatus = (ZipDownloadStatus) o;
    return Objects.equals(this.totalFileCount, zipDownloadStatus.totalFileCount) &&
        Objects.equals(this.downloadedFileCount, zipDownloadStatus.downloadedFileCount) &&
        Objects.equals(this.skippedFileCount, zipDownloadStatus.skippedFileCount) &&
        Objects.equals(this.skippedFolderCount, zipDownloadStatus.skippedFolderCount) &&
        Objects.equals(this.state, zipDownloadStatus.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalFileCount, downloadedFileCount, skippedFileCount, skippedFolderCount, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZipDownloadStatus {\n");
    
    sb.append("    totalFileCount: ").append(toIndentedString(totalFileCount)).append("\n");
    sb.append("    downloadedFileCount: ").append(toIndentedString(downloadedFileCount)).append("\n");
    sb.append("    skippedFileCount: ").append(toIndentedString(skippedFileCount)).append("\n");
    sb.append("    skippedFolderCount: ").append(toIndentedString(skippedFolderCount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
