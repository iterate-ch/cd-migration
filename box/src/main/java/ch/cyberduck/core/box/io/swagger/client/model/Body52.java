/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Body52
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class Body52 {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("provenance")
  private String provenance = null;

  @JsonProperty("external_sync_identifier")
  private String externalSyncIdentifier = null;

  @JsonProperty("description")
  private String description = null;

  /**
   * Specifies who can invite the group to collaborate on folders.  When set to &#x60;admins_only&#x60; the enterprise admin, co-admins, and the group&#x27;s admin can invite the group.  When set to &#x60;admins_and_members&#x60; all the admins listed above and group members can invite the group.  When set to &#x60;all_managed_users&#x60; all managed users in the enterprise can invite the group.
   */
  public enum InvitabilityLevelEnum {
    ADMINS_ONLY("admins_only"),
    ADMINS_AND_MEMBERS("admins_and_members"),
    ALL_MANAGED_USERS("all_managed_users");

    private String value;

    InvitabilityLevelEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static InvitabilityLevelEnum fromValue(String text) {
      for (InvitabilityLevelEnum b : InvitabilityLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("invitability_level")
  private InvitabilityLevelEnum invitabilityLevel = null;

  /**
   * Specifies who can see the members of the group.  * &#x60;admins_only&#x60; - the enterprise admin, co-admins, group&#x27;s   group admin * &#x60;admins_and_members&#x60; - all admins and group members * &#x60;all_managed_users&#x60; - all managed users in the   enterprise
   */
  public enum MemberViewabilityLevelEnum {
    ADMINS_ONLY("admins_only"),
    ADMINS_AND_MEMBERS("admins_and_members"),
    ALL_MANAGED_USERS("all_managed_users");

    private String value;

    MemberViewabilityLevelEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static MemberViewabilityLevelEnum fromValue(String text) {
      for (MemberViewabilityLevelEnum b : MemberViewabilityLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("member_viewability_level")
  private MemberViewabilityLevelEnum memberViewabilityLevel = null;

  public Body52 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the new group to be created. This name must be unique within the enterprise.
   * @return name
  **/
  @Schema(example = "Customer Support", required = true, description = "The name of the new group to be created. This name must be unique within the enterprise.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Body52 provenance(String provenance) {
    this.provenance = provenance;
    return this;
  }

   /**
   * Keeps track of which external source this group is coming, for example &#x60;Active Directory&#x60;, or &#x60;Okta&#x60;.  Setting this will also prevent Box admins from editing the group name and its members directly via the Box web application.  This is desirable for one-way syncing of groups.
   * @return provenance
  **/
  @Schema(example = "Active Directory", description = "Keeps track of which external source this group is coming, for example `Active Directory`, or `Okta`.  Setting this will also prevent Box admins from editing the group name and its members directly via the Box web application.  This is desirable for one-way syncing of groups.")
  public String getProvenance() {
    return provenance;
  }

  public void setProvenance(String provenance) {
    this.provenance = provenance;
  }

  public Body52 externalSyncIdentifier(String externalSyncIdentifier) {
    this.externalSyncIdentifier = externalSyncIdentifier;
    return this;
  }

   /**
   * An arbitrary identifier that can be used by external group sync tools to link this Box Group to an external group.  Example values of this field could be an **Active Directory Object ID** or a **Google Group ID**.  We recommend you use of this field in order to avoid issues when group names are updated in either Box or external systems.
   * @return externalSyncIdentifier
  **/
  @Schema(example = "AD:123456", description = "An arbitrary identifier that can be used by external group sync tools to link this Box Group to an external group.  Example values of this field could be an **Active Directory Object ID** or a **Google Group ID**.  We recommend you use of this field in order to avoid issues when group names are updated in either Box or external systems.")
  public String getExternalSyncIdentifier() {
    return externalSyncIdentifier;
  }

  public void setExternalSyncIdentifier(String externalSyncIdentifier) {
    this.externalSyncIdentifier = externalSyncIdentifier;
  }

  public Body52 description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A human readable description of the group.
   * @return description
  **/
  @Schema(example = "\"Customer Support Group - as imported from Active Directory\"", description = "A human readable description of the group.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Body52 invitabilityLevel(InvitabilityLevelEnum invitabilityLevel) {
    this.invitabilityLevel = invitabilityLevel;
    return this;
  }

   /**
   * Specifies who can invite the group to collaborate on folders.  When set to &#x60;admins_only&#x60; the enterprise admin, co-admins, and the group&#x27;s admin can invite the group.  When set to &#x60;admins_and_members&#x60; all the admins listed above and group members can invite the group.  When set to &#x60;all_managed_users&#x60; all managed users in the enterprise can invite the group.
   * @return invitabilityLevel
  **/
  @Schema(example = "admins_only", description = "Specifies who can invite the group to collaborate on folders.  When set to `admins_only` the enterprise admin, co-admins, and the group's admin can invite the group.  When set to `admins_and_members` all the admins listed above and group members can invite the group.  When set to `all_managed_users` all managed users in the enterprise can invite the group.")
  public InvitabilityLevelEnum getInvitabilityLevel() {
    return invitabilityLevel;
  }

  public void setInvitabilityLevel(InvitabilityLevelEnum invitabilityLevel) {
    this.invitabilityLevel = invitabilityLevel;
  }

  public Body52 memberViewabilityLevel(MemberViewabilityLevelEnum memberViewabilityLevel) {
    this.memberViewabilityLevel = memberViewabilityLevel;
    return this;
  }

   /**
   * Specifies who can see the members of the group.  * &#x60;admins_only&#x60; - the enterprise admin, co-admins, group&#x27;s   group admin * &#x60;admins_and_members&#x60; - all admins and group members * &#x60;all_managed_users&#x60; - all managed users in the   enterprise
   * @return memberViewabilityLevel
  **/
  @Schema(example = "admins_only", description = "Specifies who can see the members of the group.  * `admins_only` - the enterprise admin, co-admins, group's   group admin * `admins_and_members` - all admins and group members * `all_managed_users` - all managed users in the   enterprise")
  public MemberViewabilityLevelEnum getMemberViewabilityLevel() {
    return memberViewabilityLevel;
  }

  public void setMemberViewabilityLevel(MemberViewabilityLevelEnum memberViewabilityLevel) {
    this.memberViewabilityLevel = memberViewabilityLevel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body52 body52 = (Body52) o;
    return Objects.equals(this.name, body52.name) &&
        Objects.equals(this.provenance, body52.provenance) &&
        Objects.equals(this.externalSyncIdentifier, body52.externalSyncIdentifier) &&
        Objects.equals(this.description, body52.description) &&
        Objects.equals(this.invitabilityLevel, body52.invitabilityLevel) &&
        Objects.equals(this.memberViewabilityLevel, body52.memberViewabilityLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, provenance, externalSyncIdentifier, description, invitabilityLevel, memberViewabilityLevel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body52 {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    externalSyncIdentifier: ").append(toIndentedString(externalSyncIdentifier)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    invitabilityLevel: ").append(toIndentedString(invitabilityLevel)).append("\n");
    sb.append("    memberViewabilityLevel: ").append(toIndentedString(memberViewabilityLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
