/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.LegalHoldPolicyAssignmentCounts;
import ch.cyberduck.core.box.io.swagger.client.model.LegalHoldPolicyMini;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * Legal Hold Policy information describes the basic characteristics of the Policy, such as name, description, and filter dates.
 */
@Schema(description = "Legal Hold Policy information describes the basic characteristics of the Policy, such as name, description, and filter dates.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class LegalHoldPolicy extends LegalHoldPolicyMini {
  @JsonProperty("policy_name")
  private String policyName = null;

  @JsonProperty("description")
  private String description = null;

  /**
   * * &#x27;active&#x27; - the policy is not in a transition state * &#x27;applying&#x27; - that the policy is in the process of   being applied * &#x27;releasing&#x27; - that the process is in the process   of being released * &#x27;released&#x27; - the policy is no longer active
   */
  public enum StatusEnum {
    ACTIVE("active"),
    APPLYING("applying"),
    RELEASING("releasing"),
    RELEASED("released");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("assignment_counts")
  private LegalHoldPolicyAssignmentCounts assignmentCounts = null;

  @JsonProperty("created_by")
  private Object createdBy = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("modified_at")
  private DateTime modifiedAt = null;

  @JsonProperty("deleted_at")
  private DateTime deletedAt = null;

  @JsonProperty("filter_started_at")
  private DateTime filterStartedAt = null;

  @JsonProperty("filter_ended_at")
  private DateTime filterEndedAt = null;

  @JsonProperty("release_notes")
  private String releaseNotes = null;

  public LegalHoldPolicy policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

   /**
   * Name of the legal hold policy.
   * @return policyName
  **/
  @Schema(example = "Policy 4", description = "Name of the legal hold policy.")
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }

  public LegalHoldPolicy description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the legal hold policy. Optional property with a 500 character limit.
   * @return description
  **/
  @Schema(example = "Postman created policy", description = "Description of the legal hold policy. Optional property with a 500 character limit.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public LegalHoldPolicy status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * * &#x27;active&#x27; - the policy is not in a transition state * &#x27;applying&#x27; - that the policy is in the process of   being applied * &#x27;releasing&#x27; - that the process is in the process   of being released * &#x27;released&#x27; - the policy is no longer active
   * @return status
  **/
  @Schema(example = "active", description = "* 'active' - the policy is not in a transition state * 'applying' - that the policy is in the process of   being applied * 'releasing' - that the process is in the process   of being released * 'released' - the policy is no longer active")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public LegalHoldPolicy assignmentCounts(LegalHoldPolicyAssignmentCounts assignmentCounts) {
    this.assignmentCounts = assignmentCounts;
    return this;
  }

   /**
   * Get assignmentCounts
   * @return assignmentCounts
  **/
  @Schema(description = "")
  public LegalHoldPolicyAssignmentCounts getAssignmentCounts() {
    return assignmentCounts;
  }

  public void setAssignmentCounts(LegalHoldPolicyAssignmentCounts assignmentCounts) {
    this.assignmentCounts = assignmentCounts;
  }

  public LegalHoldPolicy createdBy(Object createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(description = "")
  public Object getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Object createdBy) {
    this.createdBy = createdBy;
  }

  public LegalHoldPolicy createdAt(DateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the legal hold policy object was created
   * @return createdAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "When the legal hold policy object was created")
  public DateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(DateTime createdAt) {
    this.createdAt = createdAt;
  }

  public LegalHoldPolicy modifiedAt(DateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * When the legal hold policy object was modified. Does not update when assignments are added or removed.
   * @return modifiedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "When the legal hold policy object was modified. Does not update when assignments are added or removed.")
  public DateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(DateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public LegalHoldPolicy deletedAt(DateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * When the policy release request was sent. (Because it can take time for a policy to fully delete, this isn&#x27;t quite the same time that the policy is fully deleted).  If &#x60;null&#x60;, the policy was not deleted.
   * @return deletedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "When the policy release request was sent. (Because it can take time for a policy to fully delete, this isn't quite the same time that the policy is fully deleted).  If `null`, the policy was not deleted.")
  public DateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(DateTime deletedAt) {
    this.deletedAt = deletedAt;
  }

  public LegalHoldPolicy filterStartedAt(DateTime filterStartedAt) {
    this.filterStartedAt = filterStartedAt;
    return this;
  }

   /**
   * User-specified, optional date filter applies to Custodian assignments only
   * @return filterStartedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "User-specified, optional date filter applies to Custodian assignments only")
  public DateTime getFilterStartedAt() {
    return filterStartedAt;
  }

  public void setFilterStartedAt(DateTime filterStartedAt) {
    this.filterStartedAt = filterStartedAt;
  }

  public LegalHoldPolicy filterEndedAt(DateTime filterEndedAt) {
    this.filterEndedAt = filterEndedAt;
    return this;
  }

   /**
   * User-specified, optional date filter applies to Custodian assignments only
   * @return filterEndedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "User-specified, optional date filter applies to Custodian assignments only")
  public DateTime getFilterEndedAt() {
    return filterEndedAt;
  }

  public void setFilterEndedAt(DateTime filterEndedAt) {
    this.filterEndedAt = filterEndedAt;
  }

  public LegalHoldPolicy releaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

   /**
   * Optional notes about why the policy was created.
   * @return releaseNotes
  **/
  @Schema(example = "Example", description = "Optional notes about why the policy was created.")
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalHoldPolicy legalHoldPolicy = (LegalHoldPolicy) o;
    return Objects.equals(this.policyName, legalHoldPolicy.policyName) &&
        Objects.equals(this.description, legalHoldPolicy.description) &&
        Objects.equals(this.status, legalHoldPolicy.status) &&
        Objects.equals(this.assignmentCounts, legalHoldPolicy.assignmentCounts) &&
        Objects.equals(this.createdBy, legalHoldPolicy.createdBy) &&
        Objects.equals(this.createdAt, legalHoldPolicy.createdAt) &&
        Objects.equals(this.modifiedAt, legalHoldPolicy.modifiedAt) &&
        Objects.equals(this.deletedAt, legalHoldPolicy.deletedAt) &&
        Objects.equals(this.filterStartedAt, legalHoldPolicy.filterStartedAt) &&
        Objects.equals(this.filterEndedAt, legalHoldPolicy.filterEndedAt) &&
        Objects.equals(this.releaseNotes, legalHoldPolicy.releaseNotes) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyName, description, status, assignmentCounts, createdBy, createdAt, modifiedAt, deletedAt, filterStartedAt, filterEndedAt, releaseNotes, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalHoldPolicy {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    assignmentCounts: ").append(toIndentedString(assignmentCounts)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    filterStartedAt: ").append(toIndentedString(filterStartedAt)).append("\n");
    sb.append("    filterEndedAt: ").append(toIndentedString(filterEndedAt)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
