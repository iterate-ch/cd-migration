/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.CollaborationAcceptanceRequirementsStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * Collaborations define access permissions for users and groups to files and folders, similar to access control lists. A collaboration object grants a user or group access to a file or folder with permissions defined by a specific role.
 */
@Schema(description = "Collaborations define access permissions for users and groups to files and folders, similar to access control lists. A collaboration object grants a user or group access to a file or folder with permissions defined by a specific role.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class Collaboration {
  @JsonProperty("id")
  private String id = null;

  /**
   * &#x60;collaboration&#x60;
   */
  public enum TypeEnum {
    COLLABORATION("collaboration");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("item")
  private AllOfCollaborationItem item = null;

  @JsonProperty("accessible_by")
  private AllOfCollaborationAccessibleBy accessibleBy = null;

  @JsonProperty("invite_email")
  private String inviteEmail = null;

  /**
   * The level of access granted.
   */
  public enum RoleEnum {
    EDITOR("editor"),
    VIEWER("viewer"),
    PREVIEWER("previewer"),
    UPLOADER("uploader"),
    PREVIEWER_UPLOADER("previewer uploader"),
    VIEWER_UPLOADER("viewer uploader"),
    CO_OWNER("co-owner"),
    OWNER("owner");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RoleEnum fromValue(String text) {
      for (RoleEnum b : RoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("role")
  private RoleEnum role = null;

  @JsonProperty("expires_at")
  private DateTime expiresAt = null;

  /**
   * The status of the collaboration invitation.
   */
  public enum StatusEnum {
    ACCEPTED("accepted"),
    PENDING("pending"),
    REJECTED("rejected");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("acknowledged_at")
  private DateTime acknowledgedAt = null;

  @JsonProperty("created_by")
  private AllOfCollaborationCreatedBy createdBy = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("modified_at")
  private DateTime modifiedAt = null;

  @JsonProperty("acceptance_requirements_status")
  private CollaborationAcceptanceRequirementsStatus acceptanceRequirementsStatus = null;

  public Collaboration id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this collaboration.
   * @return id
  **/
  @Schema(example = "12345678", description = "The unique identifier for this collaboration.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Collaboration type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * &#x60;collaboration&#x60;
   * @return type
  **/
  @Schema(example = "collaboration", description = "`collaboration`")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Collaboration item(AllOfCollaborationItem item) {
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @Schema(description = "")
  public AllOfCollaborationItem getItem() {
    return item;
  }

  public void setItem(AllOfCollaborationItem item) {
    this.item = item;
  }

  public Collaboration accessibleBy(AllOfCollaborationAccessibleBy accessibleBy) {
    this.accessibleBy = accessibleBy;
    return this;
  }

   /**
   * Get accessibleBy
   * @return accessibleBy
  **/
  @Schema(description = "")
  public AllOfCollaborationAccessibleBy getAccessibleBy() {
    return accessibleBy;
  }

  public void setAccessibleBy(AllOfCollaborationAccessibleBy accessibleBy) {
    this.accessibleBy = accessibleBy;
  }

  public Collaboration inviteEmail(String inviteEmail) {
    this.inviteEmail = inviteEmail;
    return this;
  }

   /**
   * The email address used to invite an unregistered collaborator, if they are not a registered user.
   * @return inviteEmail
  **/
  @Schema(example = "john@example.com", description = "The email address used to invite an unregistered collaborator, if they are not a registered user.")
  public String getInviteEmail() {
    return inviteEmail;
  }

  public void setInviteEmail(String inviteEmail) {
    this.inviteEmail = inviteEmail;
  }

  public Collaboration role(RoleEnum role) {
    this.role = role;
    return this;
  }

   /**
   * The level of access granted.
   * @return role
  **/
  @Schema(example = "editor", description = "The level of access granted.")
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }

  public Collaboration expiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * When the collaboration will expire, or &#x60;null&#x60; if no expiration date is set.
   * @return expiresAt
  **/
  @Schema(example = "2012-12-26T10:53:43-08:00", description = "When the collaboration will expire, or `null` if no expiration date is set.")
  public DateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(DateTime expiresAt) {
    this.expiresAt = expiresAt;
  }

  public Collaboration status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the collaboration invitation.
   * @return status
  **/
  @Schema(example = "accepted", description = "The status of the collaboration invitation.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Collaboration acknowledgedAt(DateTime acknowledgedAt) {
    this.acknowledgedAt = acknowledgedAt;
    return this;
  }

   /**
   * When the &#x60;status&#x60; of the collaboration object changed to &#x60;accepted&#x60; or &#x60;rejected&#x60;
   * @return acknowledgedAt
  **/
  @Schema(example = "2012-12-12T10:55:20-08:00", description = "When the `status` of the collaboration object changed to `accepted` or `rejected`")
  public DateTime getAcknowledgedAt() {
    return acknowledgedAt;
  }

  public void setAcknowledgedAt(DateTime acknowledgedAt) {
    this.acknowledgedAt = acknowledgedAt;
  }

  public Collaboration createdBy(AllOfCollaborationCreatedBy createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(description = "")
  public AllOfCollaborationCreatedBy getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(AllOfCollaborationCreatedBy createdBy) {
    this.createdBy = createdBy;
  }

  public Collaboration createdAt(DateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the collaboration object was created
   * @return createdAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "When the collaboration object was created")
  public DateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(DateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Collaboration modifiedAt(DateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * When the collaboration object was last modified
   * @return modifiedAt
  **/
  @Schema(example = "2012-12-12T10:53:43-08:00", description = "When the collaboration object was last modified")
  public DateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(DateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public Collaboration acceptanceRequirementsStatus(CollaborationAcceptanceRequirementsStatus acceptanceRequirementsStatus) {
    this.acceptanceRequirementsStatus = acceptanceRequirementsStatus;
    return this;
  }

   /**
   * Get acceptanceRequirementsStatus
   * @return acceptanceRequirementsStatus
  **/
  @Schema(description = "")
  public CollaborationAcceptanceRequirementsStatus getAcceptanceRequirementsStatus() {
    return acceptanceRequirementsStatus;
  }

  public void setAcceptanceRequirementsStatus(CollaborationAcceptanceRequirementsStatus acceptanceRequirementsStatus) {
    this.acceptanceRequirementsStatus = acceptanceRequirementsStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collaboration collaboration = (Collaboration) o;
    return Objects.equals(this.id, collaboration.id) &&
        Objects.equals(this.type, collaboration.type) &&
        Objects.equals(this.item, collaboration.item) &&
        Objects.equals(this.accessibleBy, collaboration.accessibleBy) &&
        Objects.equals(this.inviteEmail, collaboration.inviteEmail) &&
        Objects.equals(this.role, collaboration.role) &&
        Objects.equals(this.expiresAt, collaboration.expiresAt) &&
        Objects.equals(this.status, collaboration.status) &&
        Objects.equals(this.acknowledgedAt, collaboration.acknowledgedAt) &&
        Objects.equals(this.createdBy, collaboration.createdBy) &&
        Objects.equals(this.createdAt, collaboration.createdAt) &&
        Objects.equals(this.modifiedAt, collaboration.modifiedAt) &&
        Objects.equals(this.acceptanceRequirementsStatus, collaboration.acceptanceRequirementsStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, item, accessibleBy, inviteEmail, role, expiresAt, status, acknowledgedAt, createdBy, createdAt, modifiedAt, acceptanceRequirementsStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collaboration {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    accessibleBy: ").append(toIndentedString(accessibleBy)).append("\n");
    sb.append("    inviteEmail: ").append(toIndentedString(inviteEmail)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    acknowledgedAt: ").append(toIndentedString(acknowledgedAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    acceptanceRequirementsStatus: ").append(toIndentedString(acceptanceRequirementsStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
