/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * A real-time server that can be used for long polling user events
 */
@Schema(description = "A real-time server that can be used for long polling user events")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class RealtimeServer {
  @JsonProperty("type")
  private String type = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("ttl")
  private Integer ttl = null;

  @JsonProperty("max_retries")
  private Integer maxRetries = null;

  @JsonProperty("retry_timeout")
  private Integer retryTimeout = null;

  public RealtimeServer type(String type) {
    this.type = type;
    return this;
  }

   /**
   * &#x60;realtime_server&#x60;
   * @return type
  **/
  @Schema(example = "realtime_server", description = "`realtime_server`")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public RealtimeServer url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The URL for the server.
   * @return url
  **/
  @Schema(example = "http://2.realtime.services.box.net/subscribe?channel=cc807c9c4869ffb1c81a&stream_type=all", description = "The URL for the server.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public RealtimeServer ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * The time in minutes for which this server is available
   * @return ttl
  **/
  @Schema(example = "10", description = "The time in minutes for which this server is available")
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }

  public RealtimeServer maxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
    return this;
  }

   /**
   * The maximum number of retries this server will allow before a new long poll should be started by getting a [new list of server](#options-events).
   * @return maxRetries
  **/
  @Schema(example = "10", description = "The maximum number of retries this server will allow before a new long poll should be started by getting a [new list of server](#options-events).")
  public Integer getMaxRetries() {
    return maxRetries;
  }

  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }

  public RealtimeServer retryTimeout(Integer retryTimeout) {
    this.retryTimeout = retryTimeout;
    return this;
  }

   /**
   * The maximum number of seconds without a response after which you should retry the long poll connection.  This helps to overcome network issues where the long poll looks to be working but no packages are coming through.
   * @return retryTimeout
  **/
  @Schema(example = "610", description = "The maximum number of seconds without a response after which you should retry the long poll connection.  This helps to overcome network issues where the long poll looks to be working but no packages are coming through.")
  public Integer getRetryTimeout() {
    return retryTimeout;
  }

  public void setRetryTimeout(Integer retryTimeout) {
    this.retryTimeout = retryTimeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealtimeServer realtimeServer = (RealtimeServer) o;
    return Objects.equals(this.type, realtimeServer.type) &&
        Objects.equals(this.url, realtimeServer.url) &&
        Objects.equals(this.ttl, realtimeServer.ttl) &&
        Objects.equals(this.maxRetries, realtimeServer.maxRetries) &&
        Objects.equals(this.retryTimeout, realtimeServer.retryTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, url, ttl, maxRetries, retryTimeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealtimeServer {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    retryTimeout: ").append(toIndentedString(retryTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
