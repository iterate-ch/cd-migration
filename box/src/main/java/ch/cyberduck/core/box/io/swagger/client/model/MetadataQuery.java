/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.box.io.swagger.client.model.MetadataQueryOrderBy;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Create a search using SQL-like syntax to return items that match specific metadata.
 */
@Schema(description = "Create a search using SQL-like syntax to return items that match specific metadata.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class MetadataQuery {
  @JsonProperty("from")
  private String from = null;

  @JsonProperty("query")
  private String query = null;

  @JsonProperty("query_params")
  private Map<String, String> queryParams = null;

  @JsonProperty("ancestor_folder_id")
  private String ancestorFolderId = null;

  @JsonProperty("order_by")
  private List<MetadataQueryOrderBy> orderBy = null;

  @JsonProperty("limit")
  private Integer limit = 100;

  @JsonProperty("marker")
  private String marker = null;

  @JsonProperty("fields")
  private List<String> fields = null;

  public MetadataQuery from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Specifies the template used in the query. Must be in the form &#x60;scope.templateKey&#x60;. Not all templates can be used in this field, most notably the built-in, Box-provided classification templates can not be used in a query.
   * @return from
  **/
  @Schema(example = "enterprise_123456.someTemplate", required = true, description = "Specifies the template used in the query. Must be in the form `scope.templateKey`. Not all templates can be used in this field, most notably the built-in, Box-provided classification templates can not be used in a query.")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public MetadataQuery query(String query) {
    this.query = query;
    return this;
  }

   /**
   * The query to perform. A query is a logical expression that is very similar to a SQL &#x60;SELECT&#x60; statement. Values in the search query can be turned into parameters specified in the &#x60;query_param&#x60; arguments list to prevent having to manually insert search values into the query string.  For example, a value of &#x60;:amount&#x60; would represent the &#x60;amount&#x60; value in &#x60;query_params&#x60; object.
   * @return query
  **/
  @Schema(example = "value >= :amount", description = "The query to perform. A query is a logical expression that is very similar to a SQL `SELECT` statement. Values in the search query can be turned into parameters specified in the `query_param` arguments list to prevent having to manually insert search values into the query string.  For example, a value of `:amount` would represent the `amount` value in `query_params` object.")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public MetadataQuery queryParams(Map<String, String> queryParams) {
    this.queryParams = queryParams;
    return this;
  }

  public MetadataQuery putQueryParamsItem(String key, String queryParamsItem) {
    if (this.queryParams == null) {
      this.queryParams = new HashMap<>();
    }
    this.queryParams.put(key, queryParamsItem);
    return this;
  }

   /**
   * Set of arguments corresponding to the parameters specified in the &#x60;query&#x60;. The type of each parameter used in the &#x60;query_params&#x60; must match the type of the corresponding metadata template field.
   * @return queryParams
  **/
  @Schema(example = "{\"amount\":\"100\"}", description = "Set of arguments corresponding to the parameters specified in the `query`. The type of each parameter used in the `query_params` must match the type of the corresponding metadata template field.")
  public Map<String, String> getQueryParams() {
    return queryParams;
  }

  public void setQueryParams(Map<String, String> queryParams) {
    this.queryParams = queryParams;
  }

  public MetadataQuery ancestorFolderId(String ancestorFolderId) {
    this.ancestorFolderId = ancestorFolderId;
    return this;
  }

   /**
   * The ID of the folder that you are restricting the query to. A value of zero will return results from all folders you have access to. A non-zero value will only return results found in the folder corresponding to the ID or in any of its subfolders.
   * @return ancestorFolderId
  **/
  @Schema(example = "0", required = true, description = "The ID of the folder that you are restricting the query to. A value of zero will return results from all folders you have access to. A non-zero value will only return results found in the folder corresponding to the ID or in any of its subfolders.")
  public String getAncestorFolderId() {
    return ancestorFolderId;
  }

  public void setAncestorFolderId(String ancestorFolderId) {
    this.ancestorFolderId = ancestorFolderId;
  }

  public MetadataQuery orderBy(List<MetadataQueryOrderBy> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  public MetadataQuery addOrderByItem(MetadataQueryOrderBy orderByItem) {
    if (this.orderBy == null) {
      this.orderBy = new ArrayList<>();
    }
    this.orderBy.add(orderByItem);
    return this;
  }

   /**
   * A list of template fields and directions to sort the metadata query results by.  The ordering &#x60;direction&#x60; must be the same for each item in the array.
   * @return orderBy
  **/
  @Schema(description = "A list of template fields and directions to sort the metadata query results by.  The ordering `direction` must be the same for each item in the array.")
  public List<MetadataQueryOrderBy> getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(List<MetadataQueryOrderBy> orderBy) {
    this.orderBy = orderBy;
  }

  public MetadataQuery limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * A value between 0 and 100 that indicates the maximum number of results to return for a single request. This only specifies a maximum boundary and will not guarantee the minimum number of results returned.
   * minimum: 0
   * maximum: 100
   * @return limit
  **/
  @Schema(example = "50", description = "A value between 0 and 100 that indicates the maximum number of results to return for a single request. This only specifies a maximum boundary and will not guarantee the minimum number of results returned.")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public MetadataQuery marker(String marker) {
    this.marker = marker;
    return this;
  }

   /**
   * Marker to use for requesting the next page.
   * @return marker
  **/
  @Schema(example = "AAAAAmVYB1FWec8GH6yWu2nwmanfMh07IyYInaa7DZDYjgO1H4KoLW29vPlLY173OKsci6h6xGh61gG73gnaxoS+o0BbI1/h6le6cikjlupVhASwJ2Cj0tOD9wlnrUMHHw3/ISf+uuACzrOMhN6d5fYrbidPzS6MdhJOejuYlvsg4tcBYzjauP3+VU51p77HFAIuObnJT0ff", description = "Marker to use for requesting the next page.")
  public String getMarker() {
    return marker;
  }

  public void setMarker(String marker) {
    this.marker = marker;
  }

  public MetadataQuery fields(List<String> fields) {
    this.fields = fields;
    return this;
  }

  public MetadataQuery addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * By default, this endpoint returns only the most basic info about the items for which the query matches. This attribute can be used to specify a list of additional attributes to return for any item, including its metadata.  This attribute takes a list of item fields, metadata template identifiers, or metadata template field identifiers.  For example:  * &#x60;created_by&#x60; will add the details of the user who created the item to the response. * &#x60;metadata.&lt;scope&gt;.&lt;templateKey&gt;&#x60; will return the mini-representation of the metadata instance identified by the &#x60;scope&#x60; and &#x60;templateKey&#x60;. * &#x60;metadata.&lt;scope&gt;.&lt;templateKey&gt;.&lt;field&gt;&#x60; will return all the mini-representation of the metadata instance identified by the &#x60;scope&#x60; and &#x60;templateKey&#x60; plus the field specified by the &#x60;field&#x60; name. Multiple fields for the same &#x60;scope&#x60; and &#x60;templateKey&#x60; can be defined.
   * @return fields
  **/
  @Schema(example = "[\"extension\",\"created_at\",\"item_status\",\"metadata.enterprise_1234.contracts\",\"metadata.enterprise_1234.regions.location\"]", description = "By default, this endpoint returns only the most basic info about the items for which the query matches. This attribute can be used to specify a list of additional attributes to return for any item, including its metadata.  This attribute takes a list of item fields, metadata template identifiers, or metadata template field identifiers.  For example:  * `created_by` will add the details of the user who created the item to the response. * `metadata.<scope>.<templateKey>` will return the mini-representation of the metadata instance identified by the `scope` and `templateKey`. * `metadata.<scope>.<templateKey>.<field>` will return all the mini-representation of the metadata instance identified by the `scope` and `templateKey` plus the field specified by the `field` name. Multiple fields for the same `scope` and `templateKey` can be defined.")
  public List<String> getFields() {
    return fields;
  }

  public void setFields(List<String> fields) {
    this.fields = fields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataQuery metadataQuery = (MetadataQuery) o;
    return Objects.equals(this.from, metadataQuery.from) &&
        Objects.equals(this.query, metadataQuery.query) &&
        Objects.equals(this.queryParams, metadataQuery.queryParams) &&
        Objects.equals(this.ancestorFolderId, metadataQuery.ancestorFolderId) &&
        Objects.equals(this.orderBy, metadataQuery.orderBy) &&
        Objects.equals(this.limit, metadataQuery.limit) &&
        Objects.equals(this.marker, metadataQuery.marker) &&
        Objects.equals(this.fields, metadataQuery.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, query, queryParams, ancestorFolderId, orderBy, limit, marker, fields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataQuery {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryParams: ").append(toIndentedString(queryParams)).append("\n");
    sb.append("    ancestorFolderId: ").append(toIndentedString(ancestorFolderId)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
