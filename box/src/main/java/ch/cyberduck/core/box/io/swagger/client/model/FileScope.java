/*
 * Box Platform API
 * [Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: devrel@box.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.box.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * A relation between a file and the scopes for which the file can be accessed
 */
@Schema(description = "A relation between a file and the scopes for which the file can be accessed")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-01-25T11:35:18.602705+01:00[Europe/Zurich]")
public class FileScope {
  /**
   * The file scopes for the file access
   */
  public enum ScopeEnum {
    ANNOTATION_EDIT("annotation_edit"),
    ANNOTATION_VIEW_ALL("annotation_view_all"),
    ANNOTATION_VIEW_SELF("annotation_view_self"),
    BASE_EXPLORER("base_explorer"),
    BASE_PICKER("base_picker"),
    BASE_PREVIEW("base_preview"),
    BASE_UPLOAD("base_upload"),
    ITEM_DELETE("item_delete"),
    ITEM_DOWNLOAD("item_download"),
    ITEM_PREVIEW("item_preview"),
    ITEM_RENAME("item_rename"),
    ITEM_SHARE("item_share");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ScopeEnum fromValue(String text) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("scope")
  private ScopeEnum scope = null;

  @JsonProperty("object")
  private AllOfFileScopeObject object = null;

  public FileScope scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The file scopes for the file access
   * @return scope
  **/
  @Schema(example = "item_download", description = "The file scopes for the file access")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public FileScope object(AllOfFileScopeObject object) {
    this.object = object;
    return this;
  }

   /**
   * Get object
   * @return object
  **/
  @Schema(description = "")
  public AllOfFileScopeObject getObject() {
    return object;
  }

  public void setObject(AllOfFileScopeObject object) {
    this.object = object;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileScope fileScope = (FileScope) o;
    return Objects.equals(this.scope, fileScope.scope) &&
        Objects.equals(this.object, fileScope.object);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, object);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileScope {\n");
    
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    object: ").append(toIndentedString(object)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
